<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Voodoo</name>
    </assembly>
    <members>
        <member name="T:Voodoo.WebControl">
            <summary>
            页面空间处理相关类
            </summary>
        </member>
        <member name="M:Voodoo.WebControl.SelectAll(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            选择CheckBoxList的所有项
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Voodoo.WebControl.UnSelectAll(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            撤销选择CheckBoxList的所有项
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Voodoo.WebControl.CheckItem(System.Web.UI.WebControls.CheckBoxList,System.String)">
            <summary>
            选中CheckBox 的指定值
            </summary>
            <example>如传入1,2,3,4 则选中值分别为1,2,3,4的项</example>
            <param name="self"></param>
            <param name="values"></param>
        </member>
        <member name="M:Voodoo.WebControl.CheckItem(System.Web.UI.WebControls.CheckBoxList,System.String[])">
            <summary>
            选中CheckBox 的指定值
            </summary>
            <example>如传入1,2,3,4 则选中值分别为1,2,3,4的项</example>
            <param name="self"></param>
            <param name="v">要选中的数组</param>
        </member>
        <member name="M:Voodoo.WebControl.GetValues(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            获取CheckBoxList的选中值
            </summary>
            <param name="self"></param>
            <returns>返回带逗号的字符串</returns>
            <example>返回1,2,3,4这种字符串</example>
        </member>
        <member name="M:Voodoo.WebControl.GetTexts(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            获取CheckBoxList选中项的文本
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.WebControl.ToXML(System.Data.DataTable,System.String,System.String)">
            <summary>
            DataTable转换为Xml字符串，为图表功能提供支持
            </summary>
            <param name="dt"></param>
            <param name="KeyColumn">主键，如:id</param>
            <param name="colors">颜色字符串，使用“,”分开。如：red,green.blue  或者#FF0000,#00FFFF,#0000FF</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.WebControl.SetValue(System.Web.UI.WebControls.ListControl,System.String[])">
            <summary>
            设置列表控件的值，如checkBoxList等
            </summary>
            <param name="ctrl"></param>
            <param name="values"></param>
        </member>
        <member name="M:Voodoo.WebControl.Bind(System.Web.UI.WebControls.ListControl,System.Data.DataTable,System.String,System.String)">
            <summary>
            radioButtonList绑定数据
            </summary>
            <param name="rbl"></param>
            <param name="dt"></param>
            <param name="DataTextField"></param>
            <param name="DataValueField"></param>
        </member>
        <member name="T:Voodoo.WS">
            <summary>
            猥琐类
            我就是猥琐
            该类包含一些底层常用的方法
            </summary>
        </member>
        <member name="M:Voodoo.WS.RequestInt(System.String)">
            <summary>
            取得Request的int型值，任何一个错误均返回int.MinValue，Form优先于QueryString被取出
            </summary>
            <param name="parName">参数名称</param>
            <returns>如果获取不到，返回int.MinValue</returns>
        </member>
        <member name="M:Voodoo.WS.RequestInt(System.String,System.Int32)">
            <summary>
            取得Request的int型值，Form优先于QueryString被取出
            </summary>
            <param name="parName">参数名称</param>
            <param name="defaultValue">默认值</param>
            <returns>如果获取不到，返回默认值</returns>
        </member>
        <member name="M:Voodoo.WS.RequestString(System.Object)">
            <summary>
            取得Request的string值，任何错误均返回""，Form优先于QueryString被取出
            </summary>
            <param name="key">键名</param>
            <returns>键值</returns>
        </member>
        <member name="M:Voodoo.WS.RequestString(System.Object,System.String)">
            <summary>
            取得Request的string值，Form优先于QueryString被取出
            </summary>
            <param name="key">参数名称</param>
            <param name="defaultValue">如果获取不到，返回的默认值</param>
            <returns>出a现错误返回默认值</returns>
        </member>
        <member name="M:Voodoo.WS.GetHost">
            <summary>
            得到当前域名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.WS.IsBrowserGet">
            <summary>
            判断当前访问是否来自浏览器软件
            </summary>
            <returns>当前访问是否来自浏览器软件</returns>
        </member>
        <member name="M:Voodoo.WS.IsSearchEnginesGet">
            <summary>
            判断是否来自搜索引擎链接
            </summary>
            <returns>是否来自搜索引擎链接</returns>
        </member>
        <member name="M:Voodoo.WS.GetUrl">
            <summary>
            获得当前完整Url地址
            </summary>
            <returns>当前完整Url地址</returns>
        </member>
        <member name="M:Voodoo.WS.GetPageName">
            <summary>
            获得当前页面的文件名称
            </summary>
            <returns>当前页面的文件名称</returns>
        </member>
        <member name="M:Voodoo.WS.GetIP">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="M:Voodoo.WS.SaveRequestFile(System.String)">
            <summary>
            保存用户上传的文件
            </summary>
            <param name="path">保存路径</param>
        </member>
        <member name="M:Voodoo.WS.GetSpacesString(System.Int32)">
            <summary>
            生成指定数量的html空格符号
            </summary>
        </member>
        <member name="T:Voodoo.UI.AspNetPager">
            <summary>
      用于ASP.NET Web应用程序中对数据进行分页的的服务器控件。
    </summary><remarks>
      不同于DataGrid或GridView等带分页功能的数据绑定控件，AspNetPager分页控件本身并不显示任何数据，而只显示分页导航元素，数据在页面上的显示方式与该控件无关。AspNetPager分页控件可以为GridView、DataGrid、DataList、Repeater以及自定义的数据绑定控件进行分页。AspNetPager不仅仅是一个分页控件，它还可以实现如图片浏览等程序中的前一页后一页等导航功能。
      <p>AspNetPager控件的分页方法和GridView非常相似，但AspNetPager的分页功能更为灵活、强大。AspNetPager分页控件不仅仅支持默认的PostBack方式分页，它还支持通过Url来实现分页以及Url重写功能，这使得访问者可以直接输入相应的Url来访问任何页面，并且搜索引擎也可以直接检索每个页面，若使用DataGrid或GridView等.net框架自带的数据绑定控件的分页功能，这些是无法实现的。</p><p>
        要使用 AspNetPager 分页控件，必须最少指定它的 <see cref="P:Voodoo.UI.AspNetPager.RecordCount"/> 属性的值，另外如果需要，指定并编写 <see cref="E:Voodoo.UI.AspNetPager.PageChanging"/> 或 <see cref="E:Voodoo.UI.AspNetPager.PageChanged"/> 事件的处理程序，可以在PageChanging事件处理程序中取消分页事件，在PageChanged事件处理程序中绑定数据或实现自定义的数据呈现逻辑。
        <see cref="P:Voodoo.UI.AspNetPager.RecordCount"/> 属性指定要分页的所有数据的总项数，若未指定该值或该值小于等于 <see cref="P:Voodoo.UI.AspNetPager.PageSize"/> ，即要分页的数据只有一页，则AspNetPager控件默认会自动隐藏而不显示任何内容，若需在只有一页数据的情况下显示AspNetPager分页控件，可以将它的AlwaysShow属性设为true即可。
       </p></remarks><example>
      以下示例说明如何用AspNetPager对Repeater进行分页。
      <code>
        <![CDATA[
<%@ Register Assembly="AspNetPager" Namespace="Voodoo.UI" TagPrefix="webdiyer" %>
<%@Import NameSpace="System.Data"%>
<%@Import NameSpace="System.Data.SqlClient"%>
<script runat="server" Language="C#">
void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            int totalOrders = (int)SqlHelper.ExecuteScalar(CommandType.StoredProcedure, "P_GetOrderNumber");
            AspNetPager1.RecordCount = totalOrders;
            bindData();
        }
    }

 void bindData()
    {
        Repeater1.DataSource = SqlHelper.ExecuteReader(CommandType.StoredProcedure,"P_GetPagedOrders2005",
            new SqlParameter("@startIndex", AspNetPager1.StartRecordIndex),
            new SqlParameter("@pageSize", AspNetPager1.PageSize));
        Repeater1.DataBind();
    }

 void AspNetPager1_PageChanged(object src, EventArgs e)
    {
        bindData();
    }
</script>
<HTML><HEAD>
<TITLE> AspNetPager Samples </TITLE>
<META NAME="Author" CONTENT="Webdiyer (www.webdiyer.com)">
</HEAD>

<BODY>
<form runat="server">
        <asp:Repeater ID="Repeater1" runat="server">
        <HeaderTemplate>
        <table width="100%" border="1" cellspacing="0" cellpadding="4" style="border-collapse:collapse">
        <tr style="backGround-color:#CCCCFF"><th style="width:15%"><asp:Literal ID="Literal1" runat="server" Text="<%$Resources:LocalizedText,orderid%>" /></th><th style="width:15%"><asp:Literal ID="Literal3" runat="server" Text="<%$Resources:LocalizedText,orderdate%>" /></th><th style="width:30%"><asp:Literal ID="Literal5" runat="server" Text="<%$Resources:LocalizedText,companyname%>" /></th><th style="width:20%"><asp:Literal ID="Literal2" runat="server" Text="<%$Resources:LocalizedText,customerid%>" /></th><th style="width:20%"><asp:Literal ID="Literal4" runat="server" Text="<%$Resources:LocalizedText,employeename%>" /></th></tr>
        </HeaderTemplate>
        <ItemTemplate>
        <tr style="background-color:#FAF3DC">
        <td><%#DataBinder.Eval(Container.DataItem,"orderid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"orderdate","{0:d}")%></td>
        <td><%#DataBinder.Eval(Container.DataItem, "companyname")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"customerid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"employeename")%></td>
        </tr>
        </ItemTemplate>
		<FooterTemplate>
        </table>
        </FooterTemplate>
        </asp:Repeater>
  <webdiyer:AspNetPager ID="AspNetPager1" runat="server" Width="100%" HorizontalAlign="right" PageSize="8" OnPageChanged="AspNetPager1_PageChanged">
        </webdiyer:AspNetPager>
		</form>
</BODY>
</HTML>
 ]]>
      </code><p>该示例所用的Sql Server存储过程代码如下（仅适用于SQL Server 2005）：</p><code>
<![CDATA[
CREATE PROCEDURE P_GetPagedOrders2005
	@startIndex INT, 
    @pageSize INT 
AS
begin
WITH orderList AS ( 
SELECT ROW_NUMBER() OVER (ORDER BY O.orderid DESC)AS Row, O.orderid,O.orderdate,O.customerid,C.CompanyName,E.FirstName+' '+E.LastName as EmployeeName 
from orders O
left outer join Customers C
on O.CustomerID=C.CustomerID
left outer join Employees E
on O.EmployeeID=E.EmployeeID)

SELECT orderid,orderdate,customerid,companyName,employeeName
FROM orderlist
WHERE Row between @startIndex and @startIndex+@pageSize-1
end
 ]]>
</code>
      </example>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.RaisePostBackEvent(System.String)">
            <summary>
      实现<see cref="!:IPostBackEventHandler"/> 接口，使 <see cref="T:Voodoo.UI.AspNetPager"/> 控件能够处理将窗体发送到服务器时引发的事件。
    </summary><param name="args">表示要传递到事件处理程序的可选事件参数的 String。 </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
      实现 <see cref="!:IPostBackDataHandler"/> 接口，为 <see cref="T:Voodoo.UI.AspNetPager"/> 服务器控件处理回发数据。
    </summary><param name="pkey">控件的主要标识符。</param><param name="pcol">所有传入名称值的集合。</param><returns>如果服务器控件的状态在回发发生后更改，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.RaisePostDataChangedEvent">
            <summary>
      实现 <see cref="!:IPostBackDataHandler"/> 接口，用信号要求服务器控件对象通知 ASP.NET 应用程序该控件的状态已更改。
    </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.OnPageChanging(Voodoo.UI.PageChangingEventArgs)">
            <summary>
      引发 <see cref="E:Voodoo.UI.AspNetPager.PageChanging"/> 事件。这使您可以为事件提供自定义处理程序。
    </summary><param name="e">
      一个包含事件数据 <see cref="T:Voodoo.UI.PageChangingEventArgs"/> 。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.OnPageChanged(System.EventArgs)">
            <summary>
      引发 <see cref="E:Voodoo.UI.AspNetPager.PageChanged"/> 事件。这使您可以为事件提供自定义处理程序。
    </summary><param name="e">
      一个包含事件数据 <see cref="T:System.EventArgs"/> 。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.GoToPage(System.Int32)">
            <summary>
      引发<see cref="E:Voodoo.UI.AspNetPager.PageChanging"/>和<see cref="E:Voodoo.UI.AspNetPager.PageChanged"/>事件，跳转到指定页面。
    </summary><param name="pageIndex">
      要跳转到的页索引。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.OnInit(System.EventArgs)">
            <summary>
      重写 <see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)"/> 方法。
    </summary><param name="e">
      包含事件数据的 <see cref="T:System.EventArgs"/> 对象。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.OnLoad(System.EventArgs)">
            <summary>
      重写 <see cref="M:System.Web.UI.Control.OnLoad(System.EventArgs)"/> 方法。
    </summary><param name="e">
      包含事件数据的 <see cref="T:System.EventArgs"/> 对象。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.OnPreRender(System.EventArgs)">
            <summary>
      重写<see cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)"/>方法。
    </summary><param name="e">
      包含事件数据的 <see cref="T:System.EventArgs"/> 对象。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
      重写<see cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)"/> 方法，将需要呈现的 HTML 属性和样式添加到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中
    </summary><param name="writer">
      <see cref="T:System.Web.UI.HtmlTextWriter"/>，表示要在客户端呈现 HTML 内容的输出流。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
      重写 <see cref="M:System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)"/> 方法，将 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的 HTML 开始标记输出到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 编写器中。
    </summary><param name="writer">
      <see cref="T:System.Web.UI.HtmlTextWriter"/>，表示要在客户端呈现 HTML 内容的输出流。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
      重写 <see cref="M:System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)"/> 方法，将 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的 HTML 结束标记输出到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 编写器中。
    </summary><param name="writer">
      <see cref="T:System.Web.UI.HtmlTextWriter"/>，表示要在客户端呈现 HTML 内容的输出流。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
      重写 <see cref="M:System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)"/> 方法，将控件的内容呈现到指定 <see cref="T:System.Web.UI.HtmlTextWriter"/> 的编写器中。
    </summary><param name="writer">
      <see cref="T:System.Web.UI.HtmlTextWriter"/>，表示要在客户端呈现 HTML 内容的输出流。
    </param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.GetHrefString(System.Int32)">
            <summary>
            Get the navigation url for the paging button.
            </summary>
            <param name="pageIndex">the page index correspond to the button.</param>
            <returns>href string for the paging navigation button.</returns>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.GetCustomInfoHtml(System.String)">
            <summary>
            Replace the property placeholders in the CustomInfoHTML with the property values repectively
            </summary>
            <param name="origText">original CustomInfoHTML</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.ConvertQueryStringToCollection(System.String)">
            <summary>
            Convert raw query string to NameValueCollection
            </summary>
            <param name="s">raw query string</param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.BuildUrlString(System.String,System.String)">
            <summary>
            add paging parameter and value to the current url or change parameter value if it already exists when using url paging mode
            </summary>
            <param name="sk">name of the url parameter to be added</param>
            <param name="sv">value of the url paramter to be added</param>
            <returns>href string for the navigattion button</returns>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.CreateNavigationButton(System.Web.UI.HtmlTextWriter,Voodoo.UI.AspNetPager.NavigationButton)">
            <summary>
            Create first, prev, next or last button.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
            <param name="btn">the navigation button</param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.AddToolTip(System.Web.UI.HtmlTextWriter,System.Int32)">
            <summary>
            Add tool tip text to navigation button.
            </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.AddPagingButtonLayoutTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            add paging button layout tag
            </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.CreateNumericButton(System.Web.UI.HtmlTextWriter,System.Int32)">
            <summary>
            Create numeric paging button.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
            <param name="index">the page index correspond to the paging button</param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.CreateNumericImages(System.Web.UI.HtmlTextWriter,System.Int32,System.Boolean)">
            <summary>
            Create numeric image button.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
            <param name="index">the page index correspond to the button.</param>
            <param name="isCurrent">if the page index correspond to the button is the current page index</param>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.CreateMoreButton(System.Web.UI.HtmlTextWriter,System.Int32)">
            <summary>
            create more (...) button.
            </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.writeSpacingStyle(System.Web.UI.HtmlTextWriter)">
            <summary>
            Add paging button spacing styles to HtmlTextWriter
            </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.AddHyperlinkTarget(System.Web.UI.HtmlTextWriter)">
            <summary>
            add target attribute to paging hyperlink
            </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPager.AddClassAndStyle(System.String,System.String,System.Web.UI.HtmlTextWriter)">
            <summary>
            add css class and style attribute to HtmlTextWriter
            </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowNavigationToolTip">
            <summary>
  获取或设置一个值，该值批示当鼠标指针悬停在导航按钮上时是否显示工具提示。
  </summary><value>
      boolean值，默认值为false，即不显示工具提示。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NavigationToolTipTextFormatString">
            <summary>
      获取或设置导航按钮工具提示文本的格式。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NumericButtonTextFormatString">
            <summary>
      获取或设置页索引数值导航按钮上文本的显示格式。
    </summary><value>
      字符串，指定页索引数值按钮上文本的显示格式，默认值为<see cref="F:System.String.Empty"/>，即未设置该属性。
    </value><remarks>
      使用NumericButtonTextFormatString属性指定页索引数值按钮的显示格式，如未设置该值时索引按钮文本将会是：1 2 3 ...，设置该值将改变索引按钮文本的显示格式，
      如将该值设为“[{0}]”则索引文本会显示为：[1] [2] [3] ...，将该值设为“-{0}-”则会使索引文本变为：-1- -2- -3- ...。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CurrentPageButtonTextFormatString">
            <summary>
      获取或设置当前页数值导航按钮上文本的显示格式。
    </summary><value>
      字符串，指定当前页索引数值按钮上文本的显示格式，默认值为<see cref="F:System.String.Empty"/>，如果未设置该属性，则其值与NumericButtonTextFormatString属性值相同。
    </value><remarks>
      使用CurrentPageButtonTextFormatString属性指定当前页索引数值按钮文本的显示格式，如果希望当前页数值按钮的显示格式与其它数字页索引不同，则可设置该属性来自定义当前页索引文本的显示格式。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PagingButtonType">
            <summary>
      获取或设置分页导航按钮的类型，即使用文字还是图片。
    </summary><remarks>
      要使用图片按钮，您需要准备以下图片：从0到9的十个数值图片（当ShowPageIndex设为true时），第一页、上一页、下一页、最后一页及更多页（...）五个按钮图片（当ShowFirstLast及ShowPrevNext都设为true时），
      若需要使当前页索引的数值按钮不同于别的页索引数值按钮，则还需准备当前页索引的按钮图片；
      若需要使已禁用的第一页、上一页、下一页及最后一页按钮图片不同于正常的按钮图片，则还需准备这四个按钮在禁用状态下的图片；
      <p><b>图片文件的命名规则如下：</b></p><p>
        从0到9十张数值按钮图片必须命名为“数值+ButtonImageNameExtension+ButtonImageExtension”，其中的ButtonImageNameExtension可以不用设置，
        ButtonImageExtension是图片文件的后缀名，如 .gif或 .jpg等可以在浏览器中显示的任何图片文件类型。如页索引“1”的图片文件可命名为“1.gif”或“1.jpg”，
        当您有两套或更多套图片文件时，可以通过指定ButtonImageNameExtension属性值来区分不同套的图片，如第一套图片可以不用设ButtonImageNameExtension，则图片文件名类似于“1.gif”、“2.gif”等等，而第二套图片则设置ButtonImageNameExtension为“f”，图片文件名类似于“1f.gif”，“2f.gif”等等。
      </p><p>第一页按钮的图片文件名以“first”开头，上一页按钮图片名以“prev”开头，下一页按钮图片名以“next”开头，最后一页按钮图片名以“last”开头，更多页按钮图片名以“more”开头，是否使用ButtonImageNameExtension取决于数值按钮的设置及是否有更多套图片。</p></remarks><example>
      以下代码片段示例如果使用图片按钮：
      <p><code><![CDATA[
 <Webdiyer:AspNetPager runat="server" 
		id="pager1" OnPageChanged="ChangePage"  
		PagingButtonType="image" 	ImagePath="images" 
		ButtonImageNameExtension="n" 
		DisabledButtonImageNameExtension="g" 
		ButtonImageExtension="gif" 
		CpiButtonImageNameExtension="r" 
		PagingButtonSpacing="10px"/>
 ]]></code></p></example>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NumericButtonType">
            <summary>
      获取或设置页导航数值按钮的类型，该值仅当PagingButtonType设为Image时才有效。
    </summary><remarks>
      当您将PagingButtonType设为Image当又不想让页索引数值按钮使用图片时，可以将该值设为Text，这会使页索引数据按钮使用文本而不是图片按钮。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PagingButtonLayoutType">
            <summary>
      指定分页导航按钮（数字和上页、下页、首页、尾页）布局方式，可以将这些元素包含在&lt;li&gt;
        或&lt;span&gt;标签中以方便应用CSS样式，默认不包含在任何标签中。
    </summary><value>
      一个<see cref="P:Voodoo.UI.AspNetPager.PagingButtonLayoutType"/>枚举。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CurrentPageButtonPosition">
            <summary>
      当前页数字按钮在所有数字分页按钮中的位置，可选值为：Beginning（最前）、End（最后）、Center（居中）和Fixed（默认固定）
    </summary><value>
      一个<see cref="T:Voodoo.UI.PagingButtonPosition"/>枚举。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NavigationButtonsPosition">
            <summary>
      首页、上页、下页和尾页四个导航按钮在分页导航元素中的位置，可选值为：Left（全在左侧）、Right（全在右侧）、BothSides（默认值，分布于两侧）
    </summary><value>
      一个<see cref="T:Voodoo.UI.NavigationButtonPosition"/>枚举。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NavigationButtonType">
            <summary>
      获取或设置第一页、上一页、下一页和最后一页按钮的类型，该值仅当PagingButtonType设为Image时才有效。
    </summary><remarks>
      当您将PagingButtonType设为Image但又不想让第一页、下一页、下一页和最后一页按钮使用图片，则可以将该值设为Text，这会使前面的四个按钮使用文本而不是图片按钮。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.UrlPagingTarget">
            <summary>获取或设置Url分页时分页按钮或超链接指向的目标窗口或框架的名称。</summary><remark>
      在Url分页时，如果您想在新的空白窗口或已知窗口或框架中打开分页后的页面，可以设置此属性值为目标窗口或框架的名称，如果未设置该属性，点击分页按钮后将在当前窗口或框架中打开新页面。
    </remark>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.MoreButtonType">
            <summary>
      获取或设置“更多页”（...）按钮的类型，该值仅当PagingButtonType设为Image时才有效。
    </summary><remarks>
      当您将PagingButtonType设为Image但又不想让更多页（...）按钮使用图片时，可以将此值设为Text，这会使更多页按钮使用文本而不是图片按钮。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PagingButtonSpacing">
            <summary>
      获取或设置分页导航按钮之间的间距。
    </summary><value>
      一个 Unit 值，默认值为5px。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowFirstLast">
            <summary>
      获取或设置一个值，该值指示是否在页导航元素中显示第一页和最后一页按钮。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowPrevNext">
            <summary>
      获取或设置一个值，该值指示是否在页导航元素中显示上一页和下一页按钮。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowPageIndex">
            <summary>
      获取或设置一个值，该值指示是否在页导航元素中显示页索引数值按钮。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowMoreButtons">
            <summary>
      获取或设置一个值，该值指示是否在页导航元素中显示更多页按钮。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.FirstPageText">
            <summary>
      获取或设置为第一页按钮显示的文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PrevPageText">
            <summary>
      获取或设置为上一页按钮显示的文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NextPageText">
            <summary>
      获取或设置为下一页按钮显示的文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.LastPageText">
            <summary>
      获取或设置为最后一页按钮显示的文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.NumericButtonCount">
            <summary>
      获取或设置在 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的页导航元素中同时显示的数值按钮的数目。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowDisabledButtons">
            <summary>
      获取或设置一个值，该值指定是否显示已禁用的按钮。
    </summary><remarks>
      该值用来指定是否显示已禁用的分页导航按钮，当当前页为第一页时，第一页和上一页按钮将被禁用，当当前页为最后一页时，下一页和最后一页按钮将被禁用，被禁用的按钮没有链接，在按钮上点击也不会有任何作用。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ImagePath">
            <summary>
      获取或设置当使用图片按钮时，图片文件的路径。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ButtonImageExtension">
            <summary>
      获取或设置当使用图片按钮时，图片的类型，如gif或jpg，该值即图片文件的后缀名。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ButtonImageNameExtension">
            <summary>
      获取或设置已禁用的页导航按钮图片名后缀字符串。
    </summary><remarks>
      当 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonType"/> 设为 Image 时， 该值允许您设置已禁用（即没有链接，因而点击后无反应）的页导航按钮（包括第一页、上一页、下一页、最后一页四个按钮）的图片文件名后缀字符串，因此可以使已禁用的页导航按钮不同于正常的页导航按钮。若未设置该值，则默认值为<see cref="P:Voodoo.UI.AspNetPager.ButtonImageNameExtension"/>，即已禁用的页导航按钮与正常的页导航按钮使用相同的图片。
    </remarks><summary>
      获取或设置自定义图片文件名的后缀字符串，以区分不同类型的按钮图片。
    </summary><remarks>
      <note>该值不是文件后缀名，而是为区分不同的图片文件而在图片名中加入的字符串，如：
      当前有两套按钮图片，其中一套中的“1”的图片名可为“1f.gif”，另一套中的“1”的图片名可起为“1n.gif”，其中的f和n即为ButtonImageNameExtension。</note>
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CpiButtonImageNameExtension">
            <summary>
      获取或设置当前页索引按钮的图片名后缀。
    </summary><remarks>
      当 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonType"/> 设为 Image 时，该属性允许您设置当前页索引数值按钮使用的图片名后缀字符，因此可以使当前页索引按钮与其它页索引按钮使用不同的图片，若未设置该值，则默认值为<see cref="P:Voodoo.UI.AspNetPager.ButtonImageNameExtension"/>，即当前页索引按钮与其它页索引按钮使用相同的图片。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.DisabledButtonImageNameExtension">
            <summary>
      获取或设置被禁用的分页元素使用的图片文件名后缀字符串，以便被禁用和未禁用的按钮可以使用不同的图片。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ButtonImageAlign">
            <summary>
      指定当使用图片按钮时，图片的对齐方式。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.UrlPaging">
            <summary>
      获取或设置是否启用url来传递分页信息。
    </summary><remarks>
      启用Url分页方式是将用户欲访问的页索引通过Url来传递，由于该分页方式不使用页面向自身回发来传递数据，
      所以每次分页时所有的数据都恢复为初始值或需要重新获取。使用Url分页方式不支持动态改变分页控件的属性值，因为无法将新的属性值通过Url来传递给下一页。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.UrlPageIndexName">
            <summary>
      获取或设置当启用Url分页方式时，在url中表示要传递的页索引的参数的名称。
    </summary><remarks>
      该属性允许您自定义通过Url传递页索引时表示要传递的页索引的参数的名称，以避免与现有的参数名重复。
      <p>该属性的默认值是“page”，即通过Url分页时，显示在浏览器地址栏中的Url类似于：</p>http://www.webdiyer.com/aspnetpager/samples/datagrid_url.aspx?page=2
      <p>如将该值改为“pageindex”，则上面的Url将变为：</p><p>http://www.webdiyer.com/aspnetpager/samples/datagrid_url.aspx?pageindex=2 </p>
      <note>当同一个页面上有两个分页控件为不同的数据实现分页时，必须为每个分页控件的UrlPageIndexName属性指定不同的值，否则一个分页控件分页将导致其它分页控件同时分页。</note>
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.UrlPageSizeName">
            <summary>
      获取或设置Url中指定每页显示记录数的参数的名称，或该值不为空或Url中该值对应的参数的值大于0，则PageSize属性将使用该参数的值做为每页显示的记录数。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ReverseUrlPageIndex">
            <summary>
      获取或设置当启用Url分页方式时，是否以反方向显示分页页索引参数，以利于优化搜索引擎搜索结果。
    </summary><remarks>
      该值设为true时，在Url分页时，Url中的当前页索引参数将与分页控件显示的当前页索引值反方向显示，如共有25页数据，分页控件的第1页将在Url显示为25页，分页控件的第25页将在Url中显示为第1页，分页控件中的第2页将在Url显示为24页，依次类推。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CurrentPageIndex">
            <summary>
      获取或设置当前显示页的索引。
    </summary><remarks>
      使用此属性来确定在 AspNetPager 控件中当前显示的页，当前显示的页的数字索引将默认以红色字体加粗显示，用户可以通过<see cref="P:Voodoo.UI.AspNetPager.CurrentPageButtonClass"/>或<see cref="P:Voodoo.UI.AspNetPager.CurrentPageButtonStyle"/> 属性来自定义当前页数字索引的显示样式。此属性还用于以编程的方式控制分页控件当前显示的页。 
      <note>不同于起始值为0的DataGrid控件的CurrentPageIndex和GridView控件的PageIndex属性，AspNetPager的CurrentPageIndex值是从1开始的。</note>
      </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.RecordCount">
            <summary>
      获取或设置需要分页的所有记录的总数。
    </summary><remarks>
      当页面第一次加载时，应以编程方式将有要分页的记录的总数赋予该属性，AspNetPager会将其保存的ViewState中并在页面回发时从ViewState中获取该值，因此避免了每次分页都要访问数据库而影响分页性能。AspNetPager根据要分页的所有数据的总项数和 <see cref="P:Voodoo.UI.AspNetPager.PageSize"/> 属性来计算显示所有数据需要的总页数，即 <see cref="P:Voodoo.UI.AspNetPager.PageCount"/>的值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PagesRemain">
            <summary>
      获取当前页之后未显示的页的总数。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PageSize">
            <summary>
      获取或设置每页显示的项数。
    </summary><remarks>
      该值获取或设置数据呈现控件每次要显示数据表中的的数据的项数，AspNetPager根据该值和 <see cref="P:Voodoo.UI.AspNetPager.RecordCount"/> 来计算显示所有数据需要的总页数，即 <see cref="P:Voodoo.UI.AspNetPager.PageCount"/>的值。
    </remarks><example>
      以下示例将 <see cref="T:Voodoo.UI.AspNetPager"/> 设置为允许每页显示8条数据：
      <code><![CDATA[
  ...
  <Webdiyer:AspNetPager id="pager" runat="server" PageSize=8 OnPageChanged="ChangePage"/>
  ...
 ]]></code></example>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.RecordsRemain">
            <summary>
      获取在当前页之后还未显示的剩余记录的项数。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.StartRecordIndex">
            <summary>
	当前页数据记录的起始索引。
	</summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.EndRecordIndex">
            <summary>
	当前页最后一条记录的索引。
	</summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PageCount">
            <summary>
      获取所有要分页的记录需要的总页数。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowPageIndexBox">
            <summary>
      获取或设置页索引框的显示方式，以便用户输入或从下拉框中选择需要跳转到的页索引。
    </summary><value>
      一个<see cref="P:Voodoo.UI.AspNetPager.ShowPageIndexBox"/>枚举。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PageIndexBoxType">
            <summary>
      或者或设置页索引框的显示类型，可以是允许用户手工输入的文本框和只能选择的下拉框。
    </summary><value>
      一个<see cref="P:Voodoo.UI.AspNetPager.PageIndexBoxType"/>枚举。
    </value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PageIndexBoxClass">
            <summary>
      获取或设置应用于页索引输入文本框或下拉框的CSS类名。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PageIndexBoxStyle">
            <summary>
      获取或设置页索引输入文本框或下拉框的CSS样式文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.TextBeforePageIndexBox">
            <summary>
      获取或设置页索引页索引输入文本框或下拉框前的文本字符串值。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.TextAfterPageIndexBox">
            <summary>
      获取或设置页索引页索引输入文本框或下拉框后的文本字符串值。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.SubmitButtonText">
            <summary>
      获取或设置提交按钮上的文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.SubmitButtonClass">
            <summary>
      获取或设置应用于提交按钮的CSS类名。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.SubmitButtonStyle">
            <summary>
      获取或设置应用于提交按钮的CSS样式。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.SubmitButtonImageUrl">
            <summary>
      获取或设置提交按钮的图片路径，若该属性值为空，则提交按钮显示为普通按钮，否则显示为图片按钮并使用该属性的值做为图片路径。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowBoxThreshold">
            <summary>
      获取或设置自动显示页索引输入文本框的最低起始页数。
    </summary><remarks>
      当 <see cref="P:Voodoo.UI.AspNetPager.ShowPageIndexBox"/> 设为Auto（默认）并且要分页的数据的总页数达到该值时会自动显示页索引输入文本框，默认值为30。该选项当 <see cref="P:Voodoo.UI.AspNetPager.ShowPageIndexBox"/> 设为Never或Always时没有任何作用。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.ShowCustomInfoSection">
            <summary>
      获取或设置显示用户自定义信息区的方式。
    </summary><remarks>
      该属性值设为Left或Right时会在分页导航元素左边或右边划出一个专门的区域来显示有关用户自定义信息，设为Never时不显示。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CustomInfoTextAlign">
            <summary>
      获取或设置用户自定义信息区文本的对齐方式。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CustomInfoSectionWidth">
            <summary>
      获取或设置用户自定义信息区的宽度。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CustomInfoClass">
            <summary>
      获取或设置应用于用户自定义信息区的级联样式表类名。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CustomInfoStyle">
            <summary>
      获取或设置应用于用户自定义信息区的CSS样式文本。
    </summary><value>字符串值，要应用于用户自定义信息区的CSS样式文本。</value>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CustomInfoHTML">
            <summary>
      获取或设置在显示在用户自定义信息区的用户自定义HTML文本内容。
    </summary><remarks>
      可以用“%”+属性名+“%”来代替该属性的值，控件在运行时会将“%”+属性名+“%”替换为相应的属性的值，其中的“属性名”仅适用于下列属性：
      <ul>
        <li>RecordCount：记录总数</li>
        <li>PageCount：总页数</li>
        <li>CurrentPageIndex：当前页索引</li>
        <li>StartRecordIndex：当前页起始记录的索引</li>
        <li>EndRecordIndex：当前页最后一条记录的索引</li>
        <li>PageSize：每页显示的记录项数</li>
        <li>PagesRemain：当前页之后剩余的未显示的记录的页数</li>
        <li>RecordsRemain：当前页之后剩余的未显示的记录总项数</li>
      </ul>
      属性名不区分大小写，所以“%RecordCount%”可以写为“%recordcount%”。
    </remarks><example>
      下面的代码片段显示如何设置AspNetPager的用户自定义信息：<br/>
      <code>
        <![CDATA[
 <webdiyer:aspnetpager id="AspNetPager1" runat="server" horizontalalign="Center" 
 onpagechanged="AspNetPager1_PageChanged" showcustominfosection="Left" width="100%" 
 CustomInfoHTML="当前页：%CurrentPageIndex%&nbsp;总页数：%PageCount%&nbsp;显示第%StartRecordIndex%条到%EndRecordIndex%条记录">
 </webdiyer:aspnetpager>
 ]]>
      </code>
    </example>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CurrentPageButtonStyle">
            <summary>
      获取或设置AspNetPager分页控件当前页导航按钮的CSS样式文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CurrentPageButtonClass">
            <summary>
      获取或设置AspNetPager分页控件当前页导航按钮的级联样式表 (CSS) 类。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PagingButtonsClass">
            <summary>
      获取或设置AspNetPager分页控件导航按钮（数字页索引、上页、下页、首页和尾页）的级联样式表 (CSS) 类。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PagingButtonsStyle">
            <summary>
      获取或设置AspNetPager分页控件导航按钮（数字页索引、上页、下页、首页和尾页）的CSS样式文本。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.FirstLastButtonsClass">
            <summary>
      获取或设置AspNetPager分页控件首页和尾页导航按钮的级联样式表 (CSS) 类。
    </summary><remarks>
      若未设置该值，则使用 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonsClass"/> 中设置的属性值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.FirstLastButtonsStyle">
            <summary>
      获取或设置AspNetPager分页控件首页和尾页导航按钮的CSS样式文本。
    </summary><remarks>
      若未设置该值，则使用 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonsStyle"/> 中设置的属性值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PrevNextButtonsClass">
            <summary>
      获取或设置AspNetPager分页控件上页和下页导航按钮的级联样式表 (CSS) 类。
    </summary><remarks>
      若未设置该值，则使用 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonsClass"/> 中设置的属性值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PrevNextButtonsStyle">
            <summary>
      获取或设置AspNetPager分页控件上页和下页导航按钮的CSS样式文本。
    </summary><remarks>
      若未设置该值，则使用 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonsStyle"/> 中设置的属性值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.MoreButtonsClass">
            <summary>
      获取或设置AspNetPager分页控件更多页（...）导航按钮的级联样式表 (CSS) 类。
    </summary><remarks>
      若未设置该值，则使用 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonsClass"/> 中设置的属性值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.MoreButtonsStyle">
            <summary>
      获取或设置AspNetPager分页控件更多页（...）导航按钮的CSS样式文本。
    </summary><remarks>
      若未设置该值，则使用 <see cref="P:Voodoo.UI.AspNetPager.PagingButtonsStyle"/> 中设置的属性值。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.CloneFrom">
            <summary>
      获取或设置要克隆属性值及事件处理程序的另一个 AspNetPager 的ID。
    </summary><remarks>
      当一个页面上同时有两个或更多 AspNetPager 分页控件为相同的数据控件实现分页时，可以只设置一个 AspNetPager 的相关属性及事件处理程序，其它 AspNetPager 控件可以将 CloneFrom 属性指向该控件，自动克隆该控件的属性及事件处理程序而无需重复设置属性及编写事件处理程序，
      在Url分页模式下，如果有两个或更多 AspNetPager 同时处理相同的数据或为相同的数据控件实现分页，则应该只设置一个 AspNetPager 的相关属性及编写事件处理程序，其它 AspNetPager 控件通过指定 CloseFrom 属性从该控件自动复制相关属性及事件处理程序，否则因为Url分页模式是在页面第一次加载时引发分页事件，所以如果有多个分页控件为相同的数据分页，每个 AspNetPager 的分页事件都被引发，从而导致数据被多次获取及绑定。
    </remarks><example>
      下面的示例使用两个AspNetPager为同一个Repeater进行分页，只需要设置第一个 AspNetPager 的相关属性及编写事件处理程序，第二个 AspNetPager 分页控件将 CloseFrom 属性设置为第一个 AspNetPager 的ID，从而实现自动复制第一个 AspNetPager 的相关属性及事件处理程序的目的：
      <code>
        <![CDATA[
<%@ Register Assembly="AspNetPager" Namespace="Voodoo.UI" TagPrefix="webdiyer" %>
<%@Import NameSpace="System.Data"%>
<%@Import NameSpace="System.Data.SqlClient"%>
<script runat="server" Language="C#">
void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            int totalOrders = (int)SqlHelper.ExecuteScalar(CommandType.StoredProcedure, "P_GetOrderNumber");
            AspNetPager1.RecordCount = totalOrders;
            bindData();
        }
    }

 void bindData()
    {
        Repeater1.DataSource = SqlHelper.ExecuteReader(CommandType.StoredProcedure,"P_GetPagedOrders2005",
            new SqlParameter("@startIndex", AspNetPager1.StartRecordIndex),
            new SqlParameter("@pageSize", AspNetPager1.PageSize));
        Repeater1.DataBind();
    }

 void AspNetPager1_PageChanged(object src, EventArgs e)
    {
        bindData();
    }
</script>
<HTML><HEAD>
<TITLE> AspNetPager Samples </TITLE>
<META NAME="Author" CONTENT="Webdiyer (www.webdiyer.com)">
</HEAD>

<BODY>
<form runat="server">
  <webdiyer:AspNetPager ID="AspNetPager1" runat="server" Width="100%" HorizontalAlign="right" PageSize="8" OnPageChanged="AspNetPager1_PageChanged">
        </webdiyer:AspNetPager>
        <asp:Repeater ID="Repeater1" runat="server">
        <HeaderTemplate>
        <table width="100%" border="1" cellspacing="0" cellpadding="4" style="border-collapse:collapse">
        <tr style="backGround-color:#CCCCFF"><th style="width:15%"><asp:Literal ID="Literal1" runat="server" Text="<%$Resources:LocalizedText,orderid%>" /></th><th style="width:15%"><asp:Literal ID="Literal3" runat="server" Text="<%$Resources:LocalizedText,orderdate%>" /></th><th style="width:30%"><asp:Literal ID="Literal5" runat="server" Text="<%$Resources:LocalizedText,companyname%>" /></th><th style="width:20%"><asp:Literal ID="Literal2" runat="server" Text="<%$Resources:LocalizedText,customerid%>" /></th><th style="width:20%"><asp:Literal ID="Literal4" runat="server" Text="<%$Resources:LocalizedText,employeename%>" /></th></tr>
        </HeaderTemplate>
        <ItemTemplate>
        <tr style="background-color:#FAF3DC">
        <td><%#DataBinder.Eval(Container.DataItem,"orderid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"orderdate","{0:d}")%></td>
        <td><%#DataBinder.Eval(Container.DataItem, "companyname")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"customerid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"employeename")%></td>
        </tr>
        </ItemTemplate>
		<FooterTemplate>
        </table>
        </FooterTemplate>
        </asp:Repeater>
        <webdiyer:AspNetPager ID="AspNetPager2" runat="server" CloneFrom="AspNetPager1">
        </webdiyer:AspNetPager>
		</form>
</BODY>
</HTML>
        ]]>
      </code>
    </example>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.EnableTheming">
            <summary>
      获取或设置一个值，该值指定是否为控件应用主题。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.SkinID">
            <summary>
      获取或设置要应用于控件的皮肤的ID。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.EnableUrlRewriting">
            <summary>
      获取或设置一个值，该值指定是否启用URL重写。
    </summary><remarks>
	设置该属性值为true时，UrlPaging属性值将自动变为true，即自动启用Url分页。
	</remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.UrlRewritePattern">
            <summary>
      获取或设置要URL的重写格式。
    </summary><remarks>
      该属性仅当 UrlPaging 的值为true时才有效。要重写的Url路径可以是相对于当前的Url路径，如：../pagelist_{0}.aspx ，也可以是绝对路径，如：http://www.webdiyer.com/articles/{0}.aspx ，用“{0}”占位符来表示AspNetPager分页控件的当页页索引值，用“%参数名%”表示Url中相应的参数的值。如果不设置该值，默认值为当前页面路径加下划线后跟页索引，
      如当前Url是 http://www.webdiyer.com/articlelist.aspx ，不设置 UrlRewritePattern 时，第一页的默认路径就是 http://www.webdiyer.com/articlelist_1.aspx ，第二页就是 http://www.webdiyer.com/articlelist_2.asp ，依次类推。以下举例说明如何设置重写格式：
      <p>
        <![CDATA[1、原始Url：http://www.webdiyer.com/articlelist.aspx?type=aspnet&page=2]]>（其中参数page=2为AspNetPager传递的页索引参数，这个参数名可以通过<see cref="P:Voodoo.UI.AspNetPager.UrlPageIndexName"/>属性设置，默认值为“page”）<br/>
        重写为：http://www.webdiyer.com/articlelist/aspnet/2.aspx ，则应设置：UrlRewritePattern="./articlelist/%type%/{0}.aspx";
      </p>
      <p>
        <![CDATA[2、原始Url：http://www.webdiyer.com/articlelist.aspx?type=dotnet&subtype=aspnet&page=3]]> （其中参数page=3为AspNetPager传递的页索引参数，这个参数名可以通过<see cref="P:Voodoo.UI.AspNetPager.UrlPageIndexName"/>属性设置，默认值为“page”）<br/>
        重写为：http://www.webdiyer.com/articlelist/dotnet/aspnet/page_3.aspx ，则应设置：UrlRewritePattern="./articlelist/%type%/%subtype%/page_{0}.aspx";
      </p>
    </remarks><example>
      下面的示例中演示如何设置 UrlRewritePattern 属性：
      <code>
        <![CDATA[
<webdiyer:aspnetpager id="AspNetPager1" runat="server" horizontalalign="Center" width="100%"
UrlPaging="true" EnableUrlRewriting="true" UrlRewritePattern="./listpage_{0}.aspx" 
OnPageChanged="AspNetPager1_PageChanged"></webdiyer:aspnetpager>
      ]]>
      </code>
    </example>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.AlwaysShow">
            <summary>
      获取或设置一个值，该值指定是否总是显示AspNetPager分页按件，即使要分页的数据只有一页。
    </summary><remarks>
      默认情况下，当要分页的数据只有一页时，AspNetPager默认会自动危险期而不在页面上显示任何可见内容，将此属性值设为true时，即使总页数只有一页，AspNetPager也将显示分页导航元素。
    </remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.AlwaysShowFirstLastPageNumber">
            <summary>
      获取或设置一个值，该值指定是否总是显示第一页和最后一页数字页索引按钮。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.Wrap">
            <summary>
      获取或设置一个值，该值批示是否允许控件中的内容换行。
    </summary><remarks>
    <note>
      AspNetPager 控件重写该属性，不允许内容换行。
    </note></remarks>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.PageIndexOutOfRangeErrorMessage">
            <summary>
      获取或设置当用户输入的页索引超出范围（大于最大页索引或小于最小页索引）时在客户端显示的错误信息。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.InvalidPageIndexErrorMessage">
            <summary>
      获取或设置当用户输入无效的页索引（负值或非数字）时在客户端显示的错误信息。
    </summary>
        </member>
        <member name="P:Voodoo.UI.AspNetPager.LayoutType">
            <summary>
      分页控件自定义信息区和分页导航区使用的布局方式。
    </summary><value>
      一个<see cref="P:Voodoo.UI.AspNetPager.LayoutType"/>枚举。
    </value>
        </member>
        <member name="E:Voodoo.UI.AspNetPager.PageChanging">
            <summary>
      PostBack方式分页时，当页导航元素之一被单击或用户手工输入页索引提交时发生，Url方式分页时，页面第一次加载时发生。
    </summary><remarks>
      该事件在 AspNetPager 处理分页操作前引发，因此可以在事件处理程序中根据需要取消分页操作。
    </remarks><example>
      下面的示例显示如何为PageChanging事件指定事件处理程序，当用户选中页面上的“取消分页”复选框时，取消分页操作：
      <code>
        <![CDATA[
<%@ Register Assembly="AspNetPager" Namespace="Voodoo.UI" TagPrefix="webdiyer" %>
<%@Import NameSpace="System.Data" %>
<%@Import Namespace="System.Data.SqlClient" %>
<script runat="server" Language="C#">
void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            int totalOrders = (int)SqlHelper.ExecuteScalar(CommandType.StoredProcedure, "P_GetOrderNumber");
            AspNetPager1.RecordCount = totalOrders;
            bindData();
        }
    }

 void bindData()
    {
        Repeater1.DataSource = SqlHelper.ExecuteReader(CommandType.StoredProcedure,"P_GetPagedOrders2005",
            new SqlParameter("@startIndex", AspNetPager1.StartRecordIndex),
            new SqlParameter("@pageSize", AspNetPager1.PageSize));
        Repeater1.DataBind();
    }

void AspNetPager1_PageChanging(object src,PageChangingEventArgs e){
 Response.Write("PageChanging事件被引发，新页面的索引是：" + e.NewPageIndex);
if(CheckBox1.Checked){
	e.Cancel=true;
    Response.Write("<br/>分页操作被取消");
 }
}

 void AspNetPager1_PageChanged(object src, EventArgs e)
    {
        bindData();
        Response.Write("<br/>PageChanged事件被引发，当前页索引是："+AspNetPager1.CurrentPageIndex);
    }
</script>
<HTML><HEAD>
<TITLE> AspNetPager Samples </TITLE>
<META NAME="Author" CONTENT="Webdiyer (www.webdiyer.com)">
</HEAD>

<BODY>
<form runat="server">
    <webdiyer:aspnetpager id="AspNetPager1" runat="server" OnPageChanging="AspNetPager1_PageChanging" onpagechanged="AspNetPager1_PageChanged" 
    Width="100%" HorizontalAlign="center"></webdiyer:aspnetpager>
    <asp:CheckBox ID="CheckBox1" runat="server" Text="取消分页" />
        <asp:Repeater ID="Repeater1" runat="server">
        <HeaderTemplate>
        <table width="100%" border="1" cellspacing="0" cellpadding="4" style="border-collapse:collapse">
        <tr style="backGround-color:#CCCCFF"><th style="width:15%"><asp:Literal ID="Literal1" runat="server" Text="<%$Resources:LocalizedText,orderid%>" /></th><th style="width:15%"><asp:Literal ID="Literal3" runat="server" Text="<%$Resources:LocalizedText,orderdate%>" /></th><th style="width:30%"><asp:Literal ID="Literal5" runat="server" Text="<%$Resources:LocalizedText,companyname%>" /></th><th style="width:20%"><asp:Literal ID="Literal2" runat="server" Text="<%$Resources:LocalizedText,customerid%>" /></th><th style="width:20%"><asp:Literal ID="Literal4" runat="server" Text="<%$Resources:LocalizedText,employeename%>" /></th></tr>
        </HeaderTemplate>
        <ItemTemplate>
        <tr style="background-color:#FAF3DC">
        <td><%#DataBinder.Eval(Container.DataItem,"orderid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"orderdate","{0:d}")%></td>
        <td><%#DataBinder.Eval(Container.DataItem, "companyname")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"customerid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"employeename")%></td>
        </tr>
        </ItemTemplate>
		<FooterTemplate>
        </table>
        </FooterTemplate>
        </asp:Repeater>
        <webdiyer:AspNetPager ID="AspNetPager2" runat="server" CloneFrom="AspNetPager1">
        </webdiyer:AspNetPager>
		</form>
</BODY>
</HTML>

        ]]>
      </code>
    </example>
        </member>
        <member name="E:Voodoo.UI.AspNetPager.PageChanged">
            <summary>
      PostBack方式分页时，当页导航元素之一被单击或用户手工输入页索引提交时发生，Url方式分页时，页面第一次加载时发生。
    </summary><remarks>
      该事件被引发时，AspNetPager 已完成分页操作。
    </remarks><example>
      下面的示例显示如何为PageChanged事件指定和编写事件处理程序，在该事件处理程序中重新绑定Repeater上显示的数据：
      <code>
        <![CDATA[
<%@ Register Assembly="AspNetPager" Namespace="Voodoo.UI" TagPrefix="webdiyer" %>
<%@Import NameSpace="System.Data"%>
<%@Import NameSpace="System.Data.SqlClient"%>
<script runat="server" Language="C#">
void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            int totalOrders = (int)SqlHelper.ExecuteScalar(CommandType.StoredProcedure, "P_GetOrderNumber");
            AspNetPager1.RecordCount = totalOrders;
            bindData();
        }
    }

 void bindData()
    {
        Repeater1.DataSource = SqlHelper.ExecuteReader(CommandType.StoredProcedure,"P_GetPagedOrders2005",
            new SqlParameter("@startIndex", AspNetPager1.StartRecordIndex),
            new SqlParameter("@pageSize", AspNetPager1.PageSize));
        Repeater1.DataBind();
    }

 void AspNetPager1_PageChanged(object src, EventArgs e)
    {
        bindData();
    }
</script>
<HTML><HEAD>
<TITLE> AspNetPager Samples </TITLE>
<META NAME="Author" CONTENT="Webdiyer (www.webdiyer.com)">
</HEAD>

<BODY>
<form runat="server">
  <webdiyer:AspNetPager ID="AspNetPager1" runat="server" Width="100%" HorizontalAlign="right" PageSize="8" OnPageChanged="AspNetPager1_PageChanged">
        </webdiyer:AspNetPager>
        <asp:Repeater ID="Repeater1" runat="server">
        <HeaderTemplate>
        <table width="100%" border="1" cellspacing="0" cellpadding="4" style="border-collapse:collapse">
        <tr style="backGround-color:#CCCCFF"><th style="width:15%"><asp:Literal ID="Literal1" runat="server" Text="<%$Resources:LocalizedText,orderid%>" /></th><th style="width:15%"><asp:Literal ID="Literal3" runat="server" Text="<%$Resources:LocalizedText,orderdate%>" /></th><th style="width:30%"><asp:Literal ID="Literal5" runat="server" Text="<%$Resources:LocalizedText,companyname%>" /></th><th style="width:20%"><asp:Literal ID="Literal2" runat="server" Text="<%$Resources:LocalizedText,customerid%>" /></th><th style="width:20%"><asp:Literal ID="Literal4" runat="server" Text="<%$Resources:LocalizedText,employeename%>" /></th></tr>
        </HeaderTemplate>
        <ItemTemplate>
        <tr style="background-color:#FAF3DC">
        <td><%#DataBinder.Eval(Container.DataItem,"orderid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"orderdate","{0:d}")%></td>
        <td><%#DataBinder.Eval(Container.DataItem, "companyname")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"customerid")%></td>
        <td><%#DataBinder.Eval(Container.DataItem,"employeename")%></td>
        </tr>
        </ItemTemplate>
		<FooterTemplate>
        </table>
        </FooterTemplate>
        </asp:Repeater>
        <webdiyer:AspNetPager ID="AspNetPager2" runat="server" CloneFrom="AspNetPager1">
        </webdiyer:AspNetPager>
		</form>
</BODY>
</HTML>
 ]]></code><p>该示例所用的Sql Server存储过程代码如下（仅适用于SQL Server 2005）：</p><code>
   <![CDATA[
CREATE PROCEDURE P_GetPagedOrders2005
	@startIndex INT, 
    @pageSize INT 
AS
begin
WITH orderList AS ( 
SELECT ROW_NUMBER() OVER (ORDER BY O.orderid DESC)AS Row, O.orderid,O.orderdate,O.customerid,C.CompanyName,E.FirstName+' '+E.LastName as EmployeeName 
from orders O
left outer join Customers C
on O.CustomerID=C.CustomerID
left outer join Employees E
on O.EmployeeID=E.EmployeeID)

SELECT orderid,orderdate,customerid,companyName,employeeName
FROM orderlist
WHERE Row between @startIndex and @startIndex+@pageSize-1
end
 ]]>
 </code>
</example>
        </member>
        <member name="F:Voodoo.UI.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Voodoo.Pay.YeePay.Digest">
            <summary>
            Digest 类 
            </summary>
        </member>
        <member name="T:Voodoo.Pay.AliPay.Alipay_Service">
            <summary>
            类名：alipay_service
            功能：支付宝外部服务接口控制
            详细：该页面是请求参数核心处理文件，不需要修改
            版本：3.0
            修改日期：2010-06-13
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考
            </summary>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Service.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            从配置文件及入口文件中初始化变量
            </summary>
            <param name="partner">合作身份者ID</param>
            <param name="seller_email">签约支付宝账号或卖家支付宝帐户</param>
            <param name="return_url">付完款后跳转的页面 要用 以http开头格式的完整路径，不允许加?id=123这类自定义参数</param>
            <param name="notify_url">交易过程中服务器通知的页面 要用 以http开格式的完整路径，不允许加?id=123这类自定义参数</param>
            <param name="show_url">网站商品的展示地址，不允许加?id=123这类自定义参数</param>
            <param name="out_trade_no">请与贵网站订单系统中的唯一订单号匹配</param>
            <param name="subject">订单名称，显示在支付宝收银台里的“商品名称”里，显示在支付宝的交易管理的“商品名称”的列表里。</param>
            <param name="body">订单描述、订单详细、订单备注，显示在支付宝收银台里的“商品描述”里</param>
            <param name="total_fee">订单总金额，显示在支付宝收银台里的“应付总额”里</param>
            <param name="paymethod">默认支付方式，四个值可选：bankPay(网银); cartoon(卡通); directPay(余额); CASH(网点支付)</param>
            <param name="defaultbank">默认网银代号，代号列表见club.alipay.com/read.php?tid=8681379</param>
            <param name="encrypt_key">防钓鱼时间戳</param>
            <param name="exter_invoke_ip">买家本地电脑的IP地址</param>
            <param name="extra_common_param">自定义参数，可存放任何内容（除等特殊字符外），不会显示在页面上</param>
            <param name="buyer_email">默认买家支付宝账号</param>
            <param name="royalty_type">提成类型，该值为固定值：10，不需要修改</param>
            <param name="royalty_parameters">提成信息集，与需要结合商户网站自身情况动态获取每笔交易的各分润收款账号、各分润金额、各分润说明。最多只能设置10条</param>
            <param name="it_b_pay">超时时间，不填默认是15天。八个值可选：1h(1小时),2h(2小时),3h(3小时),1d(1天),3d(3天),7d(7天),15d(15天),1c(当天)</param>
            <param name="key">安全检验码</param>
            <param name="input_charset">字符编码格式 目前支持 gb2312 或 utf-8</param>
            <param name="sign_type">加密方式 不需修改</param>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Service.Create_url">
            <summary>
            构造请求URL（GET方式请求）
            </summary>
            <returns>请求url</returns>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Service.Build_postform">
            <summary>
            构造Post表单提交HTML（POST方式请求）
            </summary>
            <returns>输出 表单提交HTML文本</returns>
        </member>
        <member name="M:Voodoo.myDouble.ToFix(System.Decimal,System.Int32)">
            <summary>
            精确到小数点后digit位
            </summary>
            <param name="value"></param>
            <param name="digit">小数点后的位数</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDouble.ToPercent(System.Double,System.Int32)">
            <summary>
            转换成百分数
            </summary>
            <param name="num">要转换的数字</param>
            <param name="fixedNum">精确到小数点后的位数</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDouble.ToPercent(System.Decimal,System.Int32)">
            <summary>
            转换成百分数
            </summary>
            <param name="num">要转换的数字</param>
            <param name="fixedNum">精确到小数点后的位数</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDouble.ToTcent(System.Double,System.Int32)">
            <summary>
            转换成千分数
            </summary>
            <param name="num">要转换的数字</param>
            <param name="fixedNum">精确到小数点后的位数</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDouble.ToTcent(System.Decimal,System.Int32)">
            <summary>
            转换成千分数
            </summary>
            <param name="num">要转换的数字</param>
            <param name="fixedNum">精确到小数点后的位数</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.validation">
            <summary>
            验证格式的相关类
            </summary>
        </member>
        <member name="M:Voodoo.validation.IsNumeric(System.String)">
            <summary>
            验证是否数字
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsDateTime(System.String)">
            <summary>
            字符串是否为日期
            </summary>
            <param name="s">要进行判断的字符串</param>
            <returns>是日期格式:true 不是：false</returns>
        </member>
        <member name="M:Voodoo.validation.IsInt(System.String)">
            <summary>
            验证字符串是否是整数
            </summary>
            <param name="s">要进行验证的字符串</param>
            <returns>整数：true  非整数:false</returns>
        </member>
        <member name="M:Voodoo.validation.IsUrl(System.String)">
            <summary>
            验证URL
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsIpAddress(System.String)">
            <summary>
            验证IP地址
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsZipCode(System.String)">
            <summary>
            验证邮编
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsChineseChar(System.String)">
            <summary>
            验证是否汉字
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsEmail(System.String)">
            <summary>
            验证是否Email地址
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsTelNumber(System.String)">
            <summary>
            验证是否电话号码
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsMobile(System.String)">
            <summary>
            是否是手机号码
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Voodoo.validation.IsLatinChar(System.String)">
            <summary>
            验证英文字母
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsIDCard(System.String)">
            <summary>  
            身份证验证  
            </summary>  
            <param name="Id">身份证号</param>  
            <returns></returns>  
        </member>
        <member name="M:Voodoo.validation.CheckIDCard18(System.String)">
            <summary>  
            18位身份证验证  
            </summary>  
            <param name="Id">身份证号</param>  
            <returns></returns>  
        </member>
        <member name="M:Voodoo.validation.CheckIDCard15(System.String)">
            <summary>  
            15位身份证验证  
            </summary>  
            <param name="Id">身份证号</param>  
            <returns></returns>  
        </member>
        <member name="M:Voodoo.validation.IsStandardPassword(System.String)">
            <summary>
            验证用户密码。正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。
            </summary>
            <param name="str">要验证的字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsBBSUserName(System.String)">
            <summary>
            验证bbs帐号是否符合标准
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Voodoo.validation.IsSQLSafeChar(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Voodoo.validation.MachRegex(System.String,System.String)">
            <summary>
            验证字符串是否符合正则表达式MachRegex
            </summary>
            <param name="regex">正则表达式</param>
            <param name="str">字符串</param>
            <returns>是否符合 true 或者 false</returns>
        </member>
        <member name="M:Voodoo.validation.IsHost(System.String)">
            <summary>
            验证是否合法域名
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="F:Voodoo.UI.SPVarRegForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.SPVarRegForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.SPVarRegForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Voodoo.string.ToPascal(System.String)">
            <summary>
            字符串转换为Pascal格式
            </summary>
            <param name="s">要转换的字符串</param>
            <returns>返回Pascal格式字符串</returns>
            <example>输入myString,返回MyString这种字符串</example>
        </member>
        <member name="M:Voodoo.string.ToCamel(System.String)">
            <summary>
            字符串转换为camel格式
            </summary>
            <param name="s">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToInt32(System.Object)">
            <summary>
            字符串转换为 Int32格式
            </summary>
            <param name="self"></param>
            <returns>int类型字符串，出错返回int.MinValue</returns>
        </member>
        <member name="M:Voodoo.string.ToInt64(System.Object)">
            <summary>
            字符串转换为 Int64格式
            </summary>
            <param name="self"></param>
            <returns>long类型字符串，出错返回int.MinValue</returns>
        </member>
        <member name="M:Voodoo.string.ipSecret(System.String)">
            <summary>
            IP地址转换为秘密的IP地址
            </summary>
            <param name="ipAddress">如：202.195.224.100</param>
            <returns>返回202.195.224.*类型的字符串</returns>
        </member>
        <member name="M:Voodoo.string.IsInArray(System.String,System.String[])">
            <summary>
            判断字符串是否在字符串数组中
            </summary>
            <param name="str">要判断的字符串</param>
            <param name="targrt">目标数组</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToIntArray(System.String[])">
            <summary>
            字符串数组转换为数字数组
            </summary>
            <param name="StringArray"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.TrimHTML(System.String)">
            <summary>
            去除HTML标记
            </summary>
            <param name="html">要除去HTML标记的文本</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.TrimBR(System.String)">
            <summary>
            去除换行符
            </summary>
            <param name="str">要进行处理的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.RTrim(System.String)">
            <summary>
            删除字符串尾部的回车/换行/空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToSqlEnCode(System.String)">
            <summary>
            SQL字符的剔除
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.Getfilename">
            <summary>
            生成以日期时间为基础的随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.TrimDbDangerousChar(System.String)">
            <summary>
            剔除脚本注入代码
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.IsNullOrEmpty(System.String)">
            <summary>
            验证字符串是否为空字符串
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToByte(System.Object)">
            <summary>
            变量转换为Byte,不成功则转换为0
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToDateTime(System.Object)">
            <summary>
            类型转换为DateTime
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToDecimal(System.Object)">
            <summary>
            类型转换为Decimal
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToBoolean(System.Object)">
            <summary>
            转换为bool类型
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            StringBuilder去除尾部符号
            </summary>
            <param name="self"></param>
            <param name="c">要去除的符号</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToCharArray(System.String)">
            <summary>
            转换为char[]数组
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToByteArray(System.String)">
            <summary>
            字符串转换为二进制数组 流 byte[]
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>返回一个二进制数据流</returns>
        </member>
        <member name="M:Voodoo.string.CutString(System.String,System.Int32)">
            <summary>
            根据设定长度截取字符串
            </summary>
            <param name="self"></param>
            <param name="charCount">保留字符的长度</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToDouble(System.String)">
            <summary>
            转换成double
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToDateString(System.String)">
            <summary>
            20100526类型的时间转换成 2010年05月26日这种格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.BuidDailNumber">
            <summary>
            生成随机的订单号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.HtmlToUbb(System.String)">
            <summary>
            HTML代码转UBB
            </summary>
            <param name="_Html"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.UBBCode(System.String)">
            <summary>
            UBB解码
            </summary>
            <param name="chr"></param>
            <returns>返回解码后的HTML</returns>
        </member>
        <member name="M:Voodoo.string.IpToLong(System.String)">
            <summary>
            IP转换为数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ClearUBB(System.String)">
            <summary>
            清除UBB标签
            </summary>
            <param name="sDetail">帖子内容</param>
            <returns>帖子内容</returns>
        </member>
        <member name="M:Voodoo.string.IsBase64String(System.String)">
            <summary>
            判断是否为base64字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Voodoo.string.GetTextFromHTML(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="HTML">html代码</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ClearLastChar(System.String)">
            <summary>
            删除最后一个字符
            </summary>
            <param name="str">要操作的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.FilterJsonChar(System.String)">
            <summary>
            过滤 Json字符
            </summary>
            <param name="sourceStr">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.StringToJson(System.String)">
            <summary>
            普通字符串转换为JSON字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.StringToJson(System.String,System.String)">
            <summary>
            普通字符串转换为JSON字符串
            </summary>
            <param name="str"></param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.LatinToUtf8(System.String)">
            <summary>
            拉丁字符转换为utf8
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.SqlStrTopToLimit(System.String)">
            <summary>
            Sql中的top 语句转换为limit语句，以适应Mysql数据库适用
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.UrlDecode(System.String)">
            <summary>
            UrlDecode
            </summary>
            <param name="str">要解码的地址字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.UrlEncode(System.String)">
            <summary>
            UrlDecode
            </summary>
            <param name="str">要编码的地址字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.FillByStrings(System.String,System.Char,System.Int32)">
            <summary>
            使用指定字符补全字符串
            </summary>
            <example>
            如1 通过"1".FillByStrings('0',3) 变成 "001"
            </example>
            <param name="str"></param>
            <param name="FillChar"></param>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.ToStandardPath(System.String)">
            <summary>
            转换成标准路径 （去除非法字符）
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.CountString(System.String,System.String)">
            <summary>
            查找字符串出现的次数
            </summary>
            <param name="str">长短文本</param>
            <param name="s">单词</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.string.GetElementByTagName(System.String,System.String)">
            <summary>
            GetElementByTagName
            </summary>
            <param name="SourceHtml">Html代码</param>
            <param name="TagName">标签名称</param>
            <returns>返回标签的OuterHtml</returns>
        </member>
        <member name="M:Voodoo.string.GetMatch(System.String,System.String)">
            <summary>
            获取字符串中得匹配结果
            </summary>
            <param name="input">源字符串</param>
            <param name="pattern">正则表达式</param>
            <returns>返回的结果集</returns>
        </member>
        <member name="P:Voodoo.string.guid">
            <summary>
            返回随机字符串guid
            </summary>
        </member>
        <member name="T:Voodoo.Pay.YeePay.BuyRefundOrdResult">
            <summary>
            BuyRefundOrdResult的实体类
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.BuyRefundOrdResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            B2C在线支付退款返回序列
            </summary>
            <param name="r0_Cmd"></param>
            <param name="r1_Code"></param>
            <param name="r2_TrxId"></param>
            <param name="r3_Amt"></param>
            <param name="r4_Cur"></param>
            <param name="hmac"></param>
        </member>
        <member name="F:Voodoo.UI.StoredProcForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.StoredProcForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.StoredProcForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Voodoo.UI.SPHelpForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.SPHelpForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.SPHelpForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Voodoo.Net.WebSite.Alexa(System.String)">
            <summary>
            获取Alexa排名
            </summary>
            <param name="host">网站地址</param>
            <returns>排名序号</returns>
        </member>
        <member name="M:Voodoo.Net.WebSite.GetBeianInfo(System.String)">
            <summary>
            获取网站备案信息
            </summary>
            <param name="host">网站域名</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Net.TopicInfo">
            <summary>
            文章信息类
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.id">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.time">
            <summary>
            发布时间
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.From">
            <summary>
            新闻来源
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.Posted">
            <summary>
            是否已经发布
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.Class">
            <summary>
            新闻类别
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.Content">
            <summary>
            文章正文
            </summary>
        </member>
        <member name="P:Voodoo.Net.TopicInfo.Url">
            <summary>
            文章地址
            </summary>
        </member>
        <member name="T:Voodoo.LinqExt.PartialEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:Voodoo.IO.XML">
            <summary>
            XML处理相关类,本类中所有路径请赋予相对路径
            2010年4月9日 15:51:19
            </summary>
        </member>
        <member name="M:Voodoo.IO.XML.Read(System.Type,System.String)">
            <summary>
            反序列化读取XML实体类型文件内容
            </summary>
            <param name="Types">实体类型，例如typeof(Ws_blockSet)</param>
            <param name="FilePath">相对地址，例如"~/files.xml"</param>
            <returns>返回的实体</returns>
        </member>
        <member name="M:Voodoo.IO.XML.Read(System.String)">
            <summary>
            读取XML文件内容,返回DataSet 
            </summary>
            <param name="filePath">XML文件的相对地址，例如"~/files.xml"</param>
            <returns>返回DataSet </returns>
        </member>
        <member name="M:Voodoo.IO.XML.ReadView(System.String)">
            <summary>
            读取Xml文件内容 返回 DataView 
            </summary>
            <param name="Path">XML文件的相对地址，例如"~/files.xml"</param>
            <returns>返回 DataView</returns>
        </member>
        <member name="M:Voodoo.IO.XML.SaveSerialize(System.Object,System.String)">
            <summary>
            序列化保存XML实体类型文件
            </summary>
            <param name="Info">要序列化的实体</param>
            <param name="FilePath">相对地址，例如"~/files.xml"</param>
        </member>
        <member name="M:Voodoo.IO.XML.SaveSerialize(System.Type,System.Object,System.String)">
            <summary>
            序列化保存XML实体类型文件，重写
            </summary>
            <param name="Types">要序列化的实体类型，例如typeof(Ws_blockSet)</param>
            <param name="Info">要序列化的实体</param>
            <param name="FilePath">相对地址，例如"~/files.xml"</param>
        </member>
        <member name="M:Voodoo.IO.XML.Serialize(System.Object)">
            <summary>
            xml序列化成字符串
            </summary>
            <param name="obj">对象</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:Voodoo.IO.XML.DataTableToXML(System.Data.DataTable)">
            <summary>
            DataTable转换为XML
            </summary>
            <param name="dt">要进行转换的DataTable</param>
            <returns>返回XML源文件</returns>
        </member>
        <member name="M:Voodoo.IO.XML.CXmlFileToDataSetByXmlSource(System.String)">
            <summary>
            将Xml文件转换为DataSet
            </summary>
            <param name="xmlSource">xml源文件</param>
            <returns>返回DataSet结果集</returns>
        </member>
        <member name="M:Voodoo.IO.XML.ConvertHtmlToString(System.String)">
            <summary>
            将HTML文件转换为字符串
            </summary>
            <param name="html">html源文件</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.XML.ConvertDataSetToString(System.Data.DataSet)">
            <summary>
            将DataSet的Table数据转换为字符串
            </summary>
            <param name="ds">dataset类型源文件</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Voodoo.IO.XML.CXmlFileToDataSet(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Voodoo.IO.XML.CXmlToDataTable(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Voodoo.IO.myDirectory.SetDirAttrNormal(System.String)">
            <summary>
            设定一个目录（本身及其内文件及子目录中所有内容）为普通文件
            不含任何特殊属性
            </summary>
            <param name="path">绝对路径</param>
        </member>
        <member name="M:Voodoo.IO.myDirectory.DeleteChild(System.String,System.Boolean)">
            <summary>
            删除一个文件夹内的“所有”内容
            如果 IsOnlyFile 则文件夹的目录结构被保持，文件被删除（Explore 中查看为“包含n个子文件夹0个文件”）
            否则 该文件夹为全空（Explore 中查看为“包含0个子文件夹0个文件”）
            </summary>
            <param name="path">文件夹全路径</param>
            <param name="IsOnlyFile"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.myDirectory.GetFileList(System.String)">
            <summary>
            获取目录中的所有文件（包含子目录）
            </summary>
            <param name="Path">目录</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.myDirectory.DeleteFile(System.String)">
            <summary>
            根据指定的绝对路径文件名删除一个文件
            </summary>
            <param name="path">绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.myDirectory.GetBytesByFileName(System.String)">
            <summary>
            根据指定的文件全路径获取byte[]内容
            </summary>
            <param name="m_fileName">文件全路径</param>
            <returns></returns>
        </member>
        <member name="F:Voodoo.UI.PageIndexBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.PageIndexBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.PageIndexBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Voodoo.Net.Telnet.close_telnet">
            Telnet 关闭连接
        </member>
        <member name="M:Voodoo.Net.Telnet.open_connect(System.String,System.Int32)">
            Telnet连接到服务器
        </member>
        <member name="M:Voodoo.Net.Telnet.exec_command(System.String)">
            执行命令
        </member>
        <member name="M:Voodoo.Net.Telnet.send_data_to_host(System.String)">
            telnet向主机发送数据
        </member>
        <member name="M:Voodoo.Net.Telnet.recv_data_from_host">
            Telnet从主机接受数据
        </member>
        <member name="T:Voodoo.Net.CollectionRulesView">
            <summary>
            采集规则操作类
            </summary>
        </member>
        <member name="M:Voodoo.Net.CollectionRulesView.GetRuleByDmain(System.String,System.Collections.Generic.List{Voodoo.Net.CollectionRules})">
            <summary>
            根据域名获得规则
            </summary>
            <param name="Domain"></param>
            <param name="Rules"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Linq.If``1(``0,System.Predicate{``0},System.Action{``0})">
            <summary>
            扩展的IF
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="predicate"></param>
            <param name="action"></param>
            <returns></returns>
            <example>
            People people2 = new People { Name = "ldp615", IsHungry = true, IsThirsty = true, IsTired = true }
                   .If(p => p.IsHungry, p => p.Eat())
                   .If(p => p.IsThirsty, p => p.Drink())
                   .If(p => p.IsTired, p => p.Rest());
               people2.Work();
            </example>
        </member>
        <member name="M:Voodoo.Linq.Switch``2(``1,System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Switch扩展方法
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="TInput"></typeparam>
            <param name="input"></param>
            <param name="inputSource"></param>
            <param name="outputSource"></param>
            <param name="defaultOutput"></param>
            <example>
            string englishName = "apple";
            string chineseName = englishName.Switch(
                   new string[] { "apple", "orange", "banana", "pear" },
                   new string[] { "苹果", "桔子", "香蕉", "梨" },
                   "未知"
                   );
            </example>
            <returns></returns>
        </member>
        <member name="M:Voodoo.int.GradeToSymbol(System.Int32,System.Int32)">
            <summary>
            将用户等级，如10级，转换为两个月亮两个星星这种形式
            </summary>
            <param name="grade">要转换的级别</param>
            <param name="step">进制，如：4（即四个星星为一个月亮）</param>
            <returns>返回3,3,2这种形式的字符串，意为：两个太阳一个月亮</returns>
        </member>
        <member name="M:Voodoo.int.ToFileSize(System.Int32)">
            <summary>
            通过字节数取得文件大小
            </summary>
            <param name="fileSize">字节数</param>
            <returns>实际大小，如：800MB</returns>
        </member>
        <member name="M:Voodoo.int.ToLongNum(System.Int32)">
            <summary>
            数字转换成带逗号分割的格式如：100,000,000
            </summary>
            <param name="Number">要进行转换的数字</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.int.InArray(System.Int32,System.Int32[])">
            <summary>
            判断数字是否在数组中
            </summary>
            <param name="number">要判断的数字</param>
            <param name="numbers">目标数组</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.int.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            产生特定范围内的随机数字
            </summary>
            <param name="min">下限</param>
            <param name="max">上线</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.int.GetPageCount(System.Int32,System.Int32)">
            <summary>
            获取页数
            </summary>
            <param name="itemCount"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Voodoo.Address.address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Voodoo.Address.AddressType">
            <summary>
            地址类型
            </summary>
        </member>
        <member name="P:Voodoo.Address.ZipCode">
            <summary>
            邮编
            </summary>
        </member>
        <member name="P:Voodoo.Address.Country">
            <summary>
            国家
            </summary>
        </member>
        <member name="P:Voodoo.Address.Province">
            <summary>
            省、自治区、直辖市
            </summary>
        </member>
        <member name="P:Voodoo.Address.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:Voodoo.Address.District">
            <summary>
            区、县
            </summary>
        </member>
        <member name="P:Voodoo.Address.Street">
            <summary>
            街道
            </summary>
        </member>
        <member name="P:Voodoo.Address.Room">
            <summary>
            房间号
            </summary>
        </member>
        <member name="T:Voodoo.Js">
            <summary>
            JavaScript处理相关方法
            </summary>
        </member>
        <member name="M:Voodoo.Js.Alert(System.String)">
            <summary>
            弹出警告框
            </summary>
            <param name="Str1"></param>
        </member>
        <member name="M:Voodoo.Js.AlertAndChangUrl(System.String,System.String)">
            <summary>
            弹出一个提示框,确定转向新URL
            </summary>
            <param name="Str1">提示信息</param>
            <param name="Url">新的URL</param>
        </member>
        <member name="M:Voodoo.Js.ConfirmChangUrlOrRefreshParent(System.String,System.String)">
            <summary>
            确认某操作后转入URL或者刷新父窗口
            </summary>
            <param name="message">弹出的询问信息</param>
            <param name="url">选择确定后转入的地址</param>
        </member>
        <member name="T:Voodoo.Config.Info">
            <summary>
            Web.Config文件相关操作
            </summary>
        </member>
        <member name="M:Voodoo.Config.Info.GetAppSetting(System.String)">
            <summary>
            获取AppSetting值
            </summary>
            <param name="Names">节点中的Key 如：<add Key='ConnStr'/></param>
            <returns>add 节点中的value值</returns>
        </member>
        <member name="M:Voodoo.Config.Info.SetAppSetting(System.String,System.String)">
            <summary>
            设置AppSetting的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Voodoo.Config.Info.GetSection(System.String)">
            <summary>
            根据节点名获取Web.Config文件中的某一节点
            </summary>
            <param name="Names">节点的名字</param>
            <returns>返回整个节点</returns>
        </member>
        <member name="T:Voodoo.UI.PageChangingEventArgs">
            <summary>
      为 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的 <see cref="E:Voodoo.UI.AspNetPager.PageChanging"/> 事件提供数据。无法继承此类。
    </summary><remarks>
      <see cref="T:Voodoo.UI.AspNetPager"/> 分页控件会在下列情况下引发 <see cref="E:Voodoo.UI.AspNetPager.PageChanging"/>事件：<ol>
        <li>使用PostBack方式分页，分页控件的页导航元素之一被单击或用户输入页索引值然后点击跳转按钮或按回车键时；</li>
        <li>使用Url方式分页，页面第一次加载时（没有产生回发时）。</li></ol>
      <p>
        PageChanging事件发生在AspNetPager控件处理分页操作之前，一个 PageChangingEventArgs 对象被传递给该事件的处理程序，您可以从该对象传递的数据中获取用户要跳转到的新的页索引以及决定是否取消分页事件，
        要取消分页事件，将 PageChangingEventArgs 的 Cancel 属性设置为true即可（该方法仅适用于PostBack方式分页时，Url方式分页时因为无法获取分页前的页面状态及上一页的页索引，所以不理会该属性的值而继续引发 <see cref="E:Voodoo.UI.AspNetPager.PageChanged"/> 事件来实现分页操作）。
      </p>
      <p>有关 PageChangingEventArgs 实例的初始属性值列表，请参阅 PageChangingEventArgs 构造函数。</p></remarks>
        </member>
        <member name="M:Voodoo.UI.PageChangingEventArgs.#ctor(System.Int32)">
            <summary>
      使用新页面索引初始化 PageChangingEventArgs 类的新实例。
    </summary><param name="newPageIndex">
      要跳转到的新页面的页索引。
    </param>
        </member>
        <member name="P:Voodoo.UI.PageChangingEventArgs.NewPageIndex">
            <summary>
      获取用户在 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的页选择元素中选定的或在页索引文本框中手工输入的页的索引。
    </summary><value>
      用户在 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的页选择元素中选定的或在页索引文本框中输入的页的索引。
    </value><remarks>
      使用 NewPageIndex 属性确定用户在 <see cref="T:Voodoo.UI.AspNetPager"/> 控件的页选择元素中选定的或在页索引文本框中输入的页的索引。
      该值常用于设置要显示选定页的 AspNetPager 控件的 <see cref="P:Voodoo.UI.AspNetPager.CurrentPageIndex"/> 属性。
    </remarks>
        </member>
        <member name="T:Voodoo.Security.ChineseIDCard">
            <summary>
            身份证信息提取类
            </summary>
        </member>
        <member name="M:Voodoo.Security.ChineseIDCard.#ctor(System.String)">
            <summary>
            实例化新的身份证类
            </summary>
            <param name="num">身份证号</param>
        </member>
        <member name="P:Voodoo.Security.ChineseIDCard.Valid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:Voodoo.Security.ChineseIDCard.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:Voodoo.Security.ChineseIDCard.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Voodoo.Security.ChineseIDCard.Area">
            <summary>
            地区
            </summary>
        </member>
        <member name="T:Voodoo.Pay.YeePay.BuyQueryOrdDetailResult">
            <summary>
            BuyQueryOrdDetailResult的实体类
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.BuyQueryOrdDetailResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            B2C在线支付订单明细查询返回序列
            </summary>
            <param name="r0_Cmd"></param>
            <param name="r1_Code"></param>
            <param name="r2_TrxId"></param>
            <param name="r3_Amt"></param>
            <param name="r4_Cur"></param>
            <param name="r5_Pid"></param>
            <param name="r6_Order"></param>
            <param name="r8_MP"></param>
            <param name="rb_PayStatus"></param>
            <param name="rc_RefundCount"></param>
            <param name="rd_RefundAmt"></param>
            <param name="hmac"></param>
        </member>
        <member name="T:Voodoo.Net.CollectionRules">
            <summary>
            采集规则类
            </summary>
        </member>
        <member name="P:Voodoo.Net.CollectionRules.Site">
            <summary>
            网站名称
            </summary>
        </member>
        <member name="P:Voodoo.Net.CollectionRules.Domain">
            <summary>
            网站域名
            </summary>
        </member>
        <member name="P:Voodoo.Net.CollectionRules.title">
            <summary>
            标题正则表达式
            </summary>
        </member>
        <member name="P:Voodoo.Net.CollectionRules.body">
            <summary>
            正文正则表达式
            </summary>
        </member>
        <member name="P:Voodoo.Net.CollectionRules.time">
            <summary>
            新闻更新时间
            </summary>
        </member>
        <member name="P:Voodoo.Net.CollectionRules.charset">
            <summary>
            网站编码
            </summary>
        </member>
        <member name="T:Voodoo.Data.DbHelper.SQLiteHelper">
            <summary>
            SQLite数据库操作类
            </summary>
        </member>
        <member name="T:Voodoo.Data.IDbHelper">
            <summary>
            数据库操作接口类，提供程序和数据库交互接口方法，目前支持SqlServer和MySql
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.SQLiteHelper.Conn">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.SQLiteHelper.Cmd">
            <summary>
            命令对象
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.#ctor(System.String,System.Int32)">
            <summary>
            实例化 带超时时间
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.Open">
            <summary>
            开启数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.Close">
            <summary>
            关闭数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.Dispose">
            <summary>
            释放使用的所有资源
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.Add(System.Data.Common.DbParameter[])">
            <summary>
            添加SqlCommand 的参数
            </summary>
            <param name="CmdParameters">SqlCommand 的参数</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.CreateCmd(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.SQLite.SQLiteTransaction)">
            <summary>
            SqlCommand 的此实例使用的SqlConnection开启
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataSet(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataTable(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteNonQuery(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.String)">
            <summary> 
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.PageListViewSort(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            返回分页后的DataTable
            </summary>
            <param name="Tables">表（多个表用“,”分割）</param>
            <param name="PrimaryKey">表的主键</param>
            <param name="Sort">排序表达式</param>
            <param name="CurrentPage">当前页码</param>
            <param name="PageSize">每页显示记录数</param>
            <param name="Fields">需要查询出的字段</param>
            <param name="Filter">where语句，不需要带“where”</param>
            <param name="group">Group表达式 不需要“group”</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.PageListViewSort(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            返回分页后的DataTable
            </summary>
            <param name="Tables">表（多个表用“,”分割）</param>
            <param name="PrimaryKey">表的主键</param>
            <param name="Sort">排序表达式</param>
            <param name="CurrentPage">当前页码</param>
            <param name="PageSize">每页显示记录数</param>
            <param name="Fields">需要查询出的字段</param>
            <param name="Filter">where语句，不需要带“where”</param>
            <param name="group">Group表达式 不需要“group”</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.PageCountSort(System.String,System.String,System.String)">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="Tables">表名</param>
            <param name="Filter">where语句</param>
            <param name="group">group语句</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SQLiteHelper.PageCountSort(System.String,System.String,System.String,System.String)">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="Tables">表名</param>
            <param name="Filter">where语句</param>
            <param name="group">group语句</param>
            <param name="having">having语句</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Data.DbHelper.SQLiteHelper.ConnClose">
            <summary>
            DataReader及其相关联的连接是否在DataReader完成数据读取时自动关闭
            </summary>
        </member>
        <member name="F:Voodoo.UI.CustomInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.CustomInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.CustomInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Voodoo.Security.Encrypt">
            <summary>
            文件加密类
            2010年4月12日
            </summary>
        </member>
        <member name="M:Voodoo.Security.Encrypt.GetPass(Voodoo.Security.Encrypt.Code,System.String)">
            <summary>
            返回对应加密值
            </summary>
            <param name="c">加密类型</param>
            <param name="Texts">需加密值</param>
            <returns>对应加密值</returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.Base64Encode(System.String)">
            <summary>
            Base64编码
            </summary>
            <param name="Message">要进行编码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.Base64Decode(System.String)">
            <summary>
            Base64解码
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.Md5(System.String)">
            <summary>
            Md5加密
            </summary>
            <param name="Str">需加密值</param>
            <returns>Md5加密值</returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.md5_3(System.String)">
            <summary>
            webQQ登录使用的MD5_3加密
            </summary>
            <param name="s">需要处理的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.Md516(System.String)">
            <summary>
            16位Md5加密
            </summary>
            <param name="Str">需加密值</param>
            <returns>返回16位Md5加密值</returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.SHA1(System.String)">
            <summary>
            哈希加密
            </summary>
            <param name="Str">需加密值</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.EncryptDES(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Voodoo.Security.Encrypt.DecryptDES(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="T:Voodoo.Security.Encrypt.Code">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="T:Voodoo.Data.DbHelper.SqlHelper">
            <summary>
            Sql数据库操作类
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.SqlHelper.Conn">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.SqlHelper.Cmd">
            <summary>
            命令对象
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.#ctor(System.String,System.Int32)">
            <summary>
            实例化 带超时时间
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Open">
            <summary>
            开启数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Close">
            <summary>
            关闭数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Dispose">
            <summary>
            释放使用的所有资源
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Add(System.Data.SqlClient.SqlParameter[])">
            <summary>
            添加SqlCommand 的参数
            </summary>
            <param name="CmdParameters">SqlCommand 的参数</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Add(System.String,System.Data.SqlDbType,System.Object)">
            <summary> 
            传入存储过程参数和值,设置传入值类型 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Add(System.String,System.Data.SqlDbType,System.Object,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,值可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Add(System.String,System.Data.SqlDbType,System.Object,System.Int32)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Add(System.String,System.Data.SqlDbType,System.Object,System.Int32,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度,可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.Add(System.String,System.Data.SqlDbType,System.Object,System.Int32,System.Int32)">
            <summary> 
            传入存储过程参数和值,专用于Decimal类型传入 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Precision">长度</param> 
            <param name="Scale">精度</param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.CreateCmd(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
            SqlCommand 的此实例使用的SqlConnection开启
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataSet(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataTable(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteNonQuery(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.String)">
            <summary> 
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.PageListViewSort(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            返回分页后的DataTable
            </summary>
            <param name="Tables">表（多个表用“,”分割）</param>
            <param name="PrimaryKey">表的主键</param>
            <param name="Sort">排序表达式</param>
            <param name="CurrentPage">当前页码</param>
            <param name="PageSize">每页显示记录数</param>
            <param name="Fields">需要查询出的字段</param>
            <param name="Filter">where语句，不需要带“where”</param>
            <param name="group">Group表达式 不需要“group”</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.SqlHelper.PageCountSort(System.String,System.String,System.String)">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="Tables">表名</param>
            <param name="Filter">where语句</param>
            <param name="group">group语句</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Data.DbHelper.SqlHelper.ConnClose">
            <summary>
            DataReader及其相关联的连接是否在DataReader完成数据读取时自动关闭
            </summary>
        </member>
        <member name="T:Voodoo.Cache.Cache">
            <summary>
            缓存处理相关类,本类中所有路径请赋予相对路径
            2010年4月9日 16:50:19
            </summary>
        </member>
        <member name="M:Voodoo.Cache.Cache.Clear(System.String)">
            <summary>
            清除指定键值的缓存
            </summary>
            <param name="Key">要清除的缓存的key值</param>
        </member>
        <member name="M:Voodoo.Cache.Cache.Count">
            <summary>
            返回系统中缓存的个数
            </summary>
            <returns>缓存个数</returns>
        </member>
        <member name="M:Voodoo.Cache.Cache.GetCache(System.String)">
            <summary>
            获取当前指定Key的Cache值
            </summary>
            <param name="Key">缓存Key</param>
            <returns>缓存的值</returns>
        </member>
        <member name="M:Voodoo.Cache.Cache.SetCache(System.String,System.Object)">
            <summary>
            设置当前指定Key的Cache值 
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">缓存的值</param>
        </member>
        <member name="M:Voodoo.Cache.Cache.SetCache(System.String,System.Object,System.Int32)">
            <summary>
            设置当前指定Key的Cache值,并限定过期时间 
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">缓存的值</param>
            <param name="TimeOuts">超时时间（分钟）</param>
        </member>
        <member name="M:Voodoo.Cache.Cache.SetCache(System.String,System.Object,System.String)">
            <summary>
            设置当前指定Key的Cache值,依赖文件过期 
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">缓存的值</param>
            <param name="Files">绝对地址，例如"D:\Web\files.xml"</param>
        </member>
        <member name="M:Voodoo.Cache.Cache.SetCache(System.String,System.Object,System.Web.Caching.CacheItemPriority)">
            <summary>
            设置当前指定Key的Cache值
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">缓存的值</param>
            <param name="Priority">撤销缓存的优先值，此参数的值取自枚举变量“CacheItemPriority”，优先级低的数据项将先被删除。此参数主要用在缓存退出对象时.</param>
        </member>
        <member name="M:Voodoo.Cache.Cache.SetCache(System.String,System.Object,System.Int32,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>
            设置当前指定Key的Cache值
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">缓存的值</param>
            <param name="TimeOuts">一个TimeSpan，表示缓存参数将在多长时间以后被删除</param>
            <param name="CacheDep">缓存的依赖项,需要一个CacheDependency，可初始化一个</param>
            <param name="Priority">撤销缓存的优先值，此参数的值取自枚举变量“CacheItemPriority”，优先级低的数据项将先被删除。此参数主要用在缓存退出对象时</param>
        </member>
        <member name="M:Voodoo.Cache.Cache.GetCache(System.String,System.Object,System.String)">
            <summary>
            获取依赖文件过期的Cache内容
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">实体类型，例如typeof(Ws_blockSet)</param>
            <param name="FilePath">相对地址，例如"~/files.xml"</param>
            <returns>缓存的值</returns>
        </member>
        <member name="M:Voodoo.Cache.Cache.GetCache(System.String,System.String,Voodoo.Cache.Cache.FileType)">
            <summary>
            获取依赖文件过期的Cache内容
            </summary>
            <param name="Key">缓存Key</param>
            <param name="FilePath">相对地址，例如"~/files.xml"</param>
            <param name="Ft">文件类型枚举 例如FileType.XML</param>
            <returns>缓存的值</returns>
        </member>
        <member name="M:Voodoo.Cache.Cache.GetCache(System.String,System.Object,System.String,Voodoo.Cache.Cache.FileType)">
            <summary>
            获取依赖文件过期的Cache内容 重写
            </summary>
            <param name="Key">缓存Key</param>
            <param name="Obj">实体类型，例如typeof(Ws_blockSet)</param>
            <param name="FilePath">相对地址，例如"~/files.xml"</param>
            <param name="Ft">文件类型枚举 FileType.XML</param>
            <returns>缓存的值</returns>
        </member>
        <member name="T:Voodoo.Cache.Cache.FileType">
            <summary>
            文件类型枚举
            </summary>
        </member>
        <member name="T:Voodoo.UI.PagerDesigner">
            <!-- 未能插入某些或全部所包含的 XML --><include file="AspNetPagerDocs.xml" path="AspNetPagerDoc/Class[@name=&quot;PagerDesigner&quot;]/*"/>
        </member>
        <member name="M:Voodoo.UI.PagerDesigner.GetEditableDesignerRegionContent(System.Web.UI.Design.EditableDesignerRegion)">
            <!-- 未能插入某些或全部所包含的 XML --><include file="AspNetPagerDocs.xml" path="AspNetPagerDoc/Method[@name=&quot;GetEditableDesignerRegionContent&quot;]/*"/>
        </member>
        <member name="M:Voodoo.UI.PagerDesigner.GetDesignTimeHtml">
            <!-- 未能插入某些或全部所包含的 XML --><include file="AspNetPagerDocs.xml" path="AspNetPagerDoc/Method[@name=&quot;GetDesignTimeHtml&quot;]/*"/>
        </member>
        <member name="M:Voodoo.UI.PagerDesigner.GetErrorDesignTimeHtml(System.Exception)">
            <!-- 未能插入某些或全部所包含的 XML --><include file="AspNetPagerDocs.xml" path="AspNetPagerDoc/Method[@name=&quot;GetErrorDesignTimeHtml&quot;]/*"/>
        </member>
        <member name="T:Voodoo.UI.AspNetPagerActionList">
            <summary>
            Designer Action List
            </summary>
        </member>
        <member name="M:Voodoo.UI.AspNetPagerActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Constructor
            </summary>
            <param name="component"></param>
        </member>
        <member name="T:Voodoo.Pay.YeePay.Buy">
            <summary>
            B2C在线支付类(银行卡支付,电话支付标准版,神州行支付标准版)
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.Buy.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.Buy.CreateBuyUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            创建Get方式提交的支付请求串
        </member>
        <member name="M:Voodoo.Pay.YeePay.Buy.VerifyCallback(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            验证返回结果
            </summary>
            <param name="p1_MerId"></param>
            <param name="keyValue"></param>
            <param name="r0_Cmd"></param>
            <param name="r1_Code"></param>
            <param name="r2_TrxId"></param>
            <param name="r3_Amt"></param>
            <param name="r4_Cur"></param>
            <param name="r5_Pid"></param>
            <param name="r6_Order"></param>
            <param name="r7_Uid"></param>
            <param name="r8_MP"></param>
            <param name="r9_BType"></param>
            <param name="rp_PayDate"></param>
            <param name="hmac"></param>
            <returns>BuyCallbackResult</returns>
        </member>
        <member name="M:Voodoo.Pay.YeePay.Buy.QueryOrdDetail(System.String)">
            <summary>
            查询订单明细
            </summary>
            <param name="p1_MerId">商户编号</param>
            <param name="keyValue">商户密钥</param>
            <param name="p2_Order">商户订单号</param>
            <returns>BuyQueryOrdDetailResult</returns>
        </member>
        <member name="M:Voodoo.Pay.YeePay.Buy.RefundOrd(System.String,System.String,System.String,System.String)">
            <summary>
            退款
            </summary>
            <param name="p1_MerId">商户编号</param>
            <param name="keyValue">商户密钥</param>
            <param name="pb_TrxId">yeepay流水号</param>
            <param name="p3_Amt">退款金额</param>
            <param name="p4_Cur">币种</param>
            <param name="p5_Desc">退款说明</param>
            <returns></returns>
        </member>
        <member name="P:Voodoo.PhoneNumber.Number">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:Voodoo.PhoneNumber.PhoneType">
            <summary>
            电话类型
            </summary>
        </member>
        <member name="T:Voodoo.Config.SystemSetting">
            <summary>
            数据库的链接字符串
            </summary>
        </member>
        <member name="P:Voodoo.Config.SystemSetting.ForSunConntr">
            <summary>
            主数据库连接字符串
            </summary>
        </member>
        <member name="P:Voodoo.Config.SystemSetting.MySqlConnStr">
            <summary>
            MySql数据库链接
            </summary>
        </member>
        <member name="P:Voodoo.Config.SystemSetting.DbType">
            <summary>
            数据库类型 分为MSSQL和MYSQL
            </summary>
        </member>
        <member name="T:Voodoo.UI.PageChangingEventHandler">
            <summary>
 表示处理 <see cref="E:Voodoo.UI.AspNetPager.PageChanging"/> 事件的方法。
    </summary>
        </member>
        <member name="T:Voodoo.Security.Request">
            <summary>
            Request类
            2010年4月12日
            </summary>
        </member>
        <member name="M:Voodoo.Security.Request.IPAddress">
            <summary> 
            取得客户端真实IP。如果有代理则取第一个非内网地址 ，适用多层代理 
            </summary> 
        </member>
        <member name="M:Voodoo.Security.Request.IsIPAddress(System.String)">
            
            <summary> 
            判断是否是IP地址格式 0.0.0.0 
            </summary> 
            <param name="str1">待判断的IP地址</param> 
            <returns>true or false</returns> 
        </member>
        <member name="M:Voodoo.Security.Request.GetIpLong(System.Boolean)">
            <summary>
            获取ToInt64类型IP
            </summary>
            <param name="Go"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.IP">
            <summary>
            获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.IpToLong(System.String)">
            <summary>
            IP数据类型转成Int64
            </summary>
            <param name="Str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.IsGet">
            <summary>
            获取客户端是否使用的 HTTP Get 数据传输方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.IsPost">
            <summary>
            获取客户端是否使用的 HTTP POST 数据传输方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.IsSearchEngines">
            <summary>
            判断请求的 URL 是否为搜索引擎
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.Url">
            <summary>
            获取有关当前请求的 URL 的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Security.Request.UrlReferrer">
            <summary>
            获取有关客户端上次请求的 URL 的信息，该请求链接到当前的 URL
            </summary>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Pay.AliPay.Alipay_Notify">
            <summary>
            类名：alipay_notify
            功能：付款过程中服务器通知类
            详细：该页面是通知返回核心处理文件，不需要修改
            版本：3.0
            修改日期：2010-06-13
            '说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            
            //////////////////////注意/////////////////////////////
            调试通知返回时，可查看或改写log日志的写入TXT里的数据，来检查通知返回是否正常 
            </summary>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Notify.#ctor(System.Collections.ArrayList,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            从配置文件中初始化变量
            </summary>
            <param name="inputPara">通知返回来的参数数组</param>
            <param name="notify_id">验证通知ID</param>
            <param name="partner">合作身份者ID</param>
            <param name="key">安全校验码</param>
            <param name="input_charset">编码格式</param>
            <param name="sign_type">加密类型</param>
            <param name="transport">访问模式</param>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Notify.Verify(System.String)">
            <summary>
            验证是否是支付宝服务器发来的请求
            </summary>
            <returns>验证结果</returns>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Notify.Get_Http(System.String,System.Int32)">
            <summary>
            获取远程服务器ATN结果
            </summary>
            <param name="strUrl">指定URL路径地址</param>
            <param name="timeout">超时时间设置</param>
            <returns>服务器ATN结果</returns>
        </member>
        <member name="P:Voodoo.Pay.AliPay.Alipay_Notify.Mysign">
            <summary>
            获取通知返回后计算后（验证）的加密结果
            </summary>
        </member>
        <member name="P:Voodoo.Pay.AliPay.Alipay_Notify.ResponseTxt">
            <summary>
            获取验证是否是支付宝服务器发来的请求结果
            </summary>
        </member>
        <member name="T:Voodoo.Contact">
            <summary>
            联系人
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="P:Voodoo.Contact.EnglishName">
            <summary>
            英文名
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:Voodoo.Contact.BirthDay">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Messanger">
            <summary>
            即时通讯
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Phone">
            <summary>
            电话
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Organization">
            <summary>
            组织
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="P:Voodoo.Contact.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:Voodoo.Contact.WebSite">
            <summary>
            网站
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Photo">
            <summary>
            照片地址 
            </summary>
        </member>
        <member name="P:Voodoo.Contact.Remark">
            <summary>
            备注
            </summary>
        </member>
        <!-- 对于成员“M:Voodoo.myRegex.FindText(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:Voodoo.Pay.YeePay.HttpUtils">
            <summary>
            通讯函数
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.HttpUtils.SendRequest(System.String,System.String,System.String)">
            <summary>
            通讯函数
            </summary>
            <param name="url">请求Url</param>
            <param name="para">请求参数</param>
            <param name="method">请求方式GET/POST</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Pay.YeePay.HttpUtils.SendRequest(System.String,System.String)">
            <summary>
            GET方式通讯
            </summary>
            <param name="url"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Pay.YeePay.FormatQueryString">
            <summary>
            FormatQueryString 的摘要说明。
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.FormatQueryString.GetQueryString(System.String,System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="strParaName"></param>
            <param name="strUrl"></param>
            <param name="strSplitChar"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Pay.YeePay.FormatQueryString.GetQueryString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="strParaName"></param>
            <param name="strUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Pay.YeePay.FormatQueryString.GetQueryString(System.String)">
            <summary>
            
            </summary>
            <param name="strParaName"></param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.e_Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="T:Voodoo.SetProperties">
            <summary>
            用于构建属性值的回调
            </summary>
            <param name="Property"></param>
        </member>
        <member name="T:Voodoo.JsonPropertyType">
            <summary>
            JsonObject属性值类型
            </summary>
        </member>
        <member name="T:Voodoo.JsonObject">
            <summary>
            JSON通用对象
            </summary>
        </member>
        <member name="M:Voodoo.JsonObject.Parse(System.String@)">
            <summary>
            Json字符串解析
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="M:Voodoo.JsonObject.Properties``1(System.String)">
            <summary>
            通过此泛型函数可直接获取指定类型属性的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.JsonObject.GetPropertyNames">
            <summary>
            获取属性名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.JsonObject.RemoveProperty(System.String)">
            <summary>
            移除一个属性
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.JsonObject.IsNull">
            <summary>
            是否为空对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.JsonObject.ToString(System.String)">
            <summary>
            ToString...
            </summary>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="P:Voodoo.JsonObject.Item(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.JsonProperty">
            <summary>
            JSON对象属性
            </summary>
        </member>
        <member name="M:Voodoo.JsonProperty.Parse(System.String@)">
            <summary>
            Json字符串解析
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="M:Voodoo.JsonProperty.ParseArray(System.String@)">
            <summary>
            Json Array解析
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.JsonProperty.ParseString(System.String@)">
            <summary>
            Json String解析
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.JsonProperty.ParseObject(System.String@)">
            <summary>
            Json Object解析
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="P:Voodoo.JsonProperty.Item(System.Int32)">
            <summary>
            定义一个索引器，如果属性是非数组的，返回本身
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Voodoo.JsonProperty.Item(System.String)">
            <summary>
            提供一个字符串索引，简化对Object属性的访问
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Voodoo.JsonProperty.Object">
            <summary>
            JsonObject值
            </summary>
        </member>
        <member name="P:Voodoo.JsonProperty.Value">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="P:Voodoo.JsonProperty.Items">
            <summary>
            Array值，如果属性是非数组的，则封装成只有一个元素的数组
            </summary>
        </member>
        <member name="P:Voodoo.JsonProperty.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:Voodoo.UI.ShowPageIndexBox">
            <summary>
      指定页索引框的显示方式，以便用户输入或从下拉框中选择需要跳转到的页索引。
    </summary>
        </member>
        <member name="F:Voodoo.UI.ShowPageIndexBox.Never">
            <summary>
      从不显示页索引输入文本框。
    </summary>
        </member>
        <member name="F:Voodoo.UI.ShowPageIndexBox.Auto">
            <summary>
      自动，选择此项后可以用 <see cref="P:Voodoo.UI.AspNetPager.ShowBoxThreshold"/> 可控制当总页数达到多少时自动显示页索引输入文本框。
    </summary>
        </member>
        <member name="F:Voodoo.UI.ShowPageIndexBox.Always">
            <summary>
      总是显示页索引输入文本框。
    </summary>
        </member>
        <member name="T:Voodoo.UI.PageIndexBoxType">
            <summary>
      指定页索引框的显示类型，可以是允许用户手工输入的文本框和只能选择的下拉框。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PageIndexBoxType.TextBox">
            <summary>
      使用文本框由用户手工输入页索引。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PageIndexBoxType.DropDownList">
            <summary>
      使用下拉框，列出所有页索引由用户选择。
    </summary>
        </member>
        <member name="T:Voodoo.UI.ShowCustomInfoSection">
            <summary>
      指定当前页索引和总页数信息的显示方式。
    </summary>
        </member>
        <member name="F:Voodoo.UI.ShowCustomInfoSection.Never">
            <summary>
      不显示。
    </summary>
        </member>
        <member name="F:Voodoo.UI.ShowCustomInfoSection.Left">
            <summary>
      显示在页导航元素之前。
    </summary>
        </member>
        <member name="F:Voodoo.UI.ShowCustomInfoSection.Right">
            <summary>
      显示在页导航元素之后。
    </summary>
        </member>
        <member name="T:Voodoo.UI.PagingButtonType">
            <summary>
      指定页导航按钮的类型。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonType.Text">
            <summary>
      使用文字按钮。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonType.Image">
            <summary>
      使用图片按钮。
    </summary>
        </member>
        <member name="T:Voodoo.UI.LayoutType">
            <summary>
      分页控件自定义信息区和分页导航区使用的布局方式。
    </summary>
        </member>
        <member name="F:Voodoo.UI.LayoutType.Table">
            <summary>
      使用表格（Table）布局方式。
    </summary>
        </member>
        <member name="F:Voodoo.UI.LayoutType.Div">
            <summary>
      使用Div布局方式。
    </summary>
        </member>
        <member name="T:Voodoo.UI.PagingButtonPosition">
            <summary>
      指定当前页数字索引按钮在所有数字页索引按钮中的位置。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonPosition.Beginning">
            <summary>
      当前页数字索引总是显示在所有数字页索引的最前面。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonPosition.End">
            <summary>
      当前页数字索引总是显示在所有数字页索引的最后面。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonPosition.Center">
            <summary>
      当前页数字索引总是显示在所有数字页索引的中间。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonPosition.Fixed">
            <summary>
      默认值，当前页索引位置固定不变。
    </summary>
        </member>
        <member name="T:Voodoo.UI.PagingButtonLayoutType">
            <summary>
      指定分页元素（数字页索引、上页、下页、首页和尾页）的布局方式。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonLayoutType.UnorderedList">
            <summary>
      将每个分页元素包含在&lt;li&gt;与&lt;/li&gt;之间。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonLayoutType.Span">
            <summary>
      将每个分页元素包含在&lt;span&gt;与&lt;/span&gt;之间。
    </summary>
        </member>
        <member name="F:Voodoo.UI.PagingButtonLayoutType.None">
            <summary>
      不设置，使用默认布局。
    </summary>
        </member>
        <member name="F:Voodoo.UI.NavigationButtonPosition.Left">
            <summary>
      首页、上页、下页和尾页四个导航按钮全部分布于分页导航元素左侧。
    </summary>
        </member>
        <member name="F:Voodoo.UI.NavigationButtonPosition.Right">
            <summary>
      首页、上页、下页和尾页四个导航按钮全部分布于分页导航元素右侧。
    </summary>
        </member>
        <member name="F:Voodoo.UI.NavigationButtonPosition.BothSides">
            <summary>
      默认值，首页、上页、下页和尾页四个导航按钮分布于分页导航元素两侧。
    </summary>
        </member>
        <member name="T:Voodoo.UI.AspNetPagerIDConverter">
            <summary>
            AspNetPager type converter used for the design time support
            </summary>
        </member>
        <member name="P:Voodoo.Pay.YeePay.BuyCallbackResult.R4_Cur">
            --
        </member>
        <member name="P:Voodoo.Pay.YeePay.BuyCallbackResult.R9_BType">
            --
        </member>
        <member name="P:Voodoo.BeianInfo.CompanyName">
            <summary>
            主办单位名称
            </summary>
        </member>
        <member name="P:Voodoo.BeianInfo.CompanyType">
            <summary>
            主办单位性质
            </summary>
        </member>
        <member name="P:Voodoo.BeianInfo.BeianNumber">
            <summary>
            备案号
            </summary>
        </member>
        <member name="P:Voodoo.BeianInfo.SiteName">
            <summary>
            网站名称
            </summary>
        </member>
        <member name="P:Voodoo.BeianInfo.IndexUrl">
            <summary>
            首页地址
            </summary>
        </member>
        <member name="P:Voodoo.BeianInfo.AutitTime">
            <summary>
            审核时间
            </summary>
        </member>
        <member name="T:Voodoo.Net.Url">
            <summary>
            URL处理相关类
            </summary>
        </member>
        <member name="M:Voodoo.Net.Url.GetHtml(System.String)">
            <summary>
            远程获取url地址的页面源代码
            </summary>
            <param name="url">要获取页面的URL</param>
            <returns>返回HTML代码</returns>
        </member>
        <member name="M:Voodoo.Net.Url.GetHtml(System.String,System.String)">
            <summary>
            远程获取url地址的页面源代码
            </summary>
            <param name="url">要获取页面的URL</param>
            <returns>返回HTML代码</returns>
        </member>
        <member name="M:Voodoo.Net.Url.GetHtml(System.String,System.String,System.Net.CookieContainer)">
            <summary>
            远程获取url地址的页面源代码
            </summary>
            <param name="url">要获取页面的URL</param>
            <returns>返回HTML代码</returns>
        </member>
        <member name="M:Voodoo.Net.Url.Alexa(System.String)">
            <summary>
            获取Alexa排名
            </summary>
            <param name="host">网站地址</param>
            <returns>排名序号</returns>
        </member>
        <member name="M:Voodoo.Net.Url.Post(System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)">
            <summary>
            将数据提交到指定URL
            </summary>
            <param name="postVars">要提交的表单数据</param>
            <param name="Url">目标URL</param>
            <returns>URL响应出的字符串</returns>
        </member>
        <member name="M:Voodoo.Net.Url.PostAndGetCookie(System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)">
            <summary>
            提交数据获取Cookie
            </summary>
            <param name="postVars"></param>
            <param name="Url"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.Url.PostGetCookieAndHtml(System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)">
            <summary>
            提交数据获取Cookie和Html
            </summary>
            <param name="postVars"></param>
            <param name="Url"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.Url.PostGetCookieAndHtml(System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding,System.Net.CookieContainer,System.String)">
            <summary>
            提交数据获取Cookie和Html
            </summary>
            <param name="postVars"></param>
            <param name="Url"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.Url.AnalysisArticle(System.String)">
            <summary>
            分析html中的标题、时间、正文
            </summary>
            <param name="Html"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.Url.GetSiteNameByDomain(System.String)">
            <summary>
            根据域名获取网站名
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Net.WebInfo">
            <summary>
            用户抓取操作返回数据类，如Cookie，HTML代码等
            </summary>
        </member>
        <member name="P:Voodoo.Net.WebInfo.cookieContainer">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:Voodoo.Net.WebInfo.Html">
            <summary>
            Html源文件
            </summary>
        </member>
        <member name="M:Voodoo.Net.robot.QQ.NeedVcode(System.String)">
            <summary>
            判断是否需要输入验证码
            </summary>
            <param name="Username"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.robot.QQ.Login(System.String,System.String,System.String)">
            <summary>
            登录账号
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="Vcode"></param>
        </member>
        <!-- 对于成员“M:Voodoo.Net.robot.QQ.Encrypt(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Voodoo.Net.robot.QQ.md5_3(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Voodoo.Net.robot.QQ.md5(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="F:Voodoo.Data.DbHelper.OracleHelper.Conn">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.OracleHelper.Cmd">
            <summary>
            命令对象
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.#ctor(System.String,System.Int32)">
            <summary>
            实例化 带超时时间
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Open">
            <summary>
            开启数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Close">
            <summary>
            关闭数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Dispose">
            <summary>
            释放使用的所有资源
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Add(System.Data.OracleClient.OracleParameter[])">
            <summary>
            添加OracleCommand 的参数
            </summary>
            <param name="CmdParameters">OracleCommand 的参数</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Add(System.String,System.Data.SqlDbType,System.Object)">
            <summary> 
            传入存储过程参数和值,设置传入值类型 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Add(System.String,System.Data.SqlDbType,System.Object,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,值可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Add(System.String,System.Data.OracleClient.OracleType,System.Object,System.Int32)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Add(System.String,System.Data.OracleClient.OracleType,System.Object,System.Int32,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度,可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.Add(System.String,System.Data.SqlDbType,System.Object,System.Int32,System.Int32)">
            <summary> 
            传入存储过程参数和值,专用于Decimal类型传入 
            </summary> 
            <param name="ParamName"></param> 
            <param name="DbType"></param> 
            <param name="Precision">长度</param> 
            <param name="Scale">精度</param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.CreateCmd(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.OracleClient.OracleTransaction)">
            <summary>
            OracleCommand 的此实例使用的OracleConnection开启
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataSet(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataTable(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteNonQuery(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.String)">
            <summary> 
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">OracleCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.PageListViewSort(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            返回分页后的DataTable
            </summary>
            <param name="Tables">表（多个表用“,”分割）</param>
            <param name="PrimaryKey">表的主键</param>
            <param name="Sort">排序表达式</param>
            <param name="CurrentPage">当前页码</param>
            <param name="PageSize">每页显示记录数</param>
            <param name="Fields">需要查询出的字段</param>
            <param name="Filter">where语句，不需要带“where”</param>
            <param name="group">Group表达式 不需要“group”</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OracleHelper.PageCountSort(System.String,System.String,System.String)">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="Tables">表名</param>
            <param name="Filter">where语句</param>
            <param name="group">group语句</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Data.DbHelper.OracleHelper.ConnClose">
            <summary>
            DataReader及其相关联的连接是否在DataReader完成数据读取时自动关闭
            </summary>
        </member>
        <member name="T:Voodoo.Security.Client">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="M:Voodoo.Security.Client.RemoteInfos">
            <summary>
            获取客户端信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.RemoteAddress">
            <summary>
            客户端IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.IpAddressDecimal1">
            <summary>
            十进制客户端IP地址
            </summary>
        </member>
        <member name="P:Voodoo.Security.Client.RemoteHostName">
            <summary>
            客户端主机名
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.RemoteUser">
            <summary>
            客户端用户名
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.RemoteUserAgent">
            <summary>
            浏览器信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.RemoteCookie">
            <summary>
            客户端Cookie
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.RemoteLanguage">
            <summary>
            客户端语言
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.RemotePort">
            <summary>
            客户端端口
            </summary>
            <returns></returns>
        </member>
        <member name="P:Voodoo.Security.Client.Url">
            <summary>
            当前页面地址
            </summary>
        </member>
        <member name="P:Voodoo.Security.Client.Browser">
            <summary>
            浏览器名
            </summary>
        </member>
        <member name="P:Voodoo.Security.Client.HaveFramework">
            <summary>
             客户端安装了.NET Framework
            </summary>
        </member>
        <member name="T:Voodoo.Net.WebServiceHelper">
            <summary>
            WebService处理类
            </summary>
        </member>
        <member name="M:Voodoo.Net.WebServiceHelper.InvokeWebService(System.String,System.String,System.Object[])">
            <summary>
            动态调用web服务
            </summary>
            <param name="url">WSDL服务地址</param>
            <param name="methodname">方法名</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.WebServiceHelper.InvokeWebService(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            动态调用web服务
            </summary>
            <param name="url">WSDL服务地址</param>
            <param name="namespace">命名空间</param>
            <param name="classname">类名</param>
            <param name="methodname">方法名</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Cookies.Cookies.GetCookie(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Cookies.Cookies.SetCookie(System.Web.HttpCookie)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:Voodoo.Cookies.Cookies.Remove(System.String)">
            <summary>
            删除指定
            Cookie
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Voodoo.Cookies.Cookies.Clear">
            <summary>
            清空Cookie
            </summary>
        </member>
        <member name="T:Voodoo.XML.SgmlParseException">
            <summary>
            Thrown if any errors occur while parsing the source.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlParseException.#ctor">
            <summary>
            Instantiates a new instance of SgmlParseException with no specific error information.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlParseException.#ctor(System.String)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
        </member>
        <member name="M:Voodoo.XML.SgmlParseException.#ctor(System.String,Voodoo.XML.Entity)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="e">The entity on which the error occurred.</param>
        </member>
        <member name="M:Voodoo.XML.SgmlParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="innerException">The original exception that caused the problem.</param>
        </member>
        <member name="M:Voodoo.XML.SgmlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SgmlParseException class with serialized data. 
            </summary>
            <param name="streamInfo">The object that holds the serialized object data.</param>
            <param name="streamCtx">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Voodoo.XML.SgmlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:Voodoo.XML.SgmlParseException.EntityContext">
            <summary>
            Contextual information detailing the entity on which the error occurred.
            </summary>
        </member>
        <member name="T:Voodoo.XML.LiteralType">
            <summary>
            The different types of literal text returned by the SgmlParser.
            </summary>
        </member>
        <member name="F:Voodoo.XML.LiteralType.CDATA">
            <summary>
            CDATA text literals.
            </summary>
        </member>
        <member name="F:Voodoo.XML.LiteralType.SDATA">
            <summary>
            SDATA entities.
            </summary>
        </member>
        <member name="F:Voodoo.XML.LiteralType.PI">
            <summary>
            The contents of a Processing Instruction.
            </summary>
        </member>
        <member name="T:Voodoo.XML.Entity">
            <summary>
            An Entity declared in a DTD.
            </summary>
        </member>
        <member name="F:Voodoo.XML.Entity.EOF">
            <summary>
            The character indicating End Of File.
            </summary>
        </member>
        <member name="M:Voodoo.XML.Entity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pubid">The public id of the entity.</param>
            <param name="uri">The uri of the entity.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:Voodoo.XML.Entity.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="literal">The literal value of the entity.</param>
        </member>
        <member name="M:Voodoo.XML.Entity.#ctor(System.String,System.Uri,System.IO.TextReader,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="baseUri">The baseUri for the entity to read from the TextReader.</param>
            <param name="stm">The TextReader to read the entity from.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:Voodoo.XML.Entity.ReadChar">
            <summary>
            Reads the next character from the DTD stream.
            </summary>
            <returns>The next character from the DTD stream.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.Open(Voodoo.XML.Entity,System.Uri)">
            <summary>
            Begins processing an entity.
            </summary>
            <param name="parent">The parent of this entity.</param>
            <param name="baseUri">The base Uri for processing this entity within.</param>
        </member>
        <member name="M:Voodoo.XML.Entity.Close">
            <summary>
            Closes the reader from which the entity is being read.
            </summary>
        </member>
        <member name="M:Voodoo.XML.Entity.SkipWhitespace">
            <summary>
            Returns the next character after any whitespace.
            </summary>
            <returns>The next character that is not whitespace.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Scans a token from the input stream and returns the result.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to process the token.</param>
            <param name="term">A set of characters to look for as terminators for the token.</param>
            <param name="nmtoken">true if the token should be a NMToken, otherwise false.</param>
            <returns>The scanned token.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Read a literal from the input stream.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the literal.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The literal scanned from the input stream.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.ScanToEnd(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Reads input until the end of the input stream or until a string of terminator characters is found.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the string.</param>
            <param name="type">The type of the element being read (only used in reporting errors).</param>
            <param name="terminators">The string of terminator characters to look for.</param>
            <returns>The string read from the input stream.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.ExpandCharEntity">
            <summary>
            Expands a character entity to be read from the input stream.
            </summary>
            <returns>The string for the character entity.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.Error(System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <exception cref="T:Voodoo.XML.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Voodoo.XML.Entity.Error(System.String,System.Char)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="ch">The unexpected character causing the error.</param>
            <exception cref="T:Voodoo.XML.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Voodoo.XML.Entity.Error(System.String,System.Int32)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="x">The value causing the error.</param>
            <exception cref="T:Voodoo.XML.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Voodoo.XML.Entity.Error(System.String,System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="arg">The argument for the error.</param>
            <exception cref="T:Voodoo.XML.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Voodoo.XML.Entity.Context">
            <summary>
            Returns a string giving information on how the entity is referenced and declared, walking up the parents until the top level parent entity is found.
            </summary>
            <returns>Contextual information for the entity.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.IsLiteralType(System.String)">
            <summary>
            Checks whether a token denotes a literal entity or not.
            </summary>
            <param name="token">The token to check.</param>
            <returns>true if the token is "CDATA", "SDATA" or "PI", otherwise false.</returns>
        </member>
        <member name="M:Voodoo.XML.Entity.SetLiteralType(System.String)">
            <summary>
            Sets the entity to be a literal of the type specified.
            </summary>
            <param name="token">One of "CDATA", "SDATA" or "PI".</param>
        </member>
        <member name="M:Voodoo.XML.Entity.Finalize">
            <summary>
            The finalizer for the Entity class.
            </summary>
        </member>
        <member name="M:Voodoo.XML.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:Voodoo.XML.Entity.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
            <param name="isDisposing">true if this method has been called by user code, false if it has been called through a finalizer.</param>
        </member>
        <member name="P:Voodoo.XML.Entity.Name">
            <summary>
            The name of the entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.IsHtml">
            <summary>
            True if the entity is the html element entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.PublicId">
            <summary>
            The public identifier of this entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.Uri">
            <summary>
            The Uri that is the source for this entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.ResolvedUri">
            <summary>
            The resolved location of the DTD this entity is from.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.Parent">
            <summary>
            Gets the parent Entity of this Entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.Lastchar">
            <summary>
            The last character read from the input stream for this entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.Line">
            <summary>
            The line on which this entity was defined.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.LinePosition">
            <summary>
            The index into the line where this entity is defined.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.IsInternal">
            <summary>
            Whether this entity is an internal entity or not.
            </summary>
            <value>true if this entity is internal, otherwise false.</value>
        </member>
        <member name="P:Voodoo.XML.Entity.Literal">
            <summary>
            The literal value of this entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.LiteralType">
            <summary>
            The <see cref="P:Voodoo.XML.Entity.LiteralType"/> of this entity.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.IsWhitespace">
            <summary>
            Whether the last char read for this entity is a whitespace character.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.Proxy">
            <summary>
            The proxy server to use when making web requests to resolve entities.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Entity.Encoding">
            <summary>
            Gets the character encoding for this entity.
            </summary>
        </member>
        <member name="T:Voodoo.XML.ElementDecl">
            <summary>
            An element declaration in a DTD.
            </summary>
        </member>
        <member name="M:Voodoo.XML.ElementDecl.#ctor(System.String,System.Boolean,System.Boolean,Voodoo.XML.ContentModel,System.String[],System.String[])">
            <summary>
            Initialises a new element declaration instance.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="sto">Whether the start tag is optional.</param>
            <param name="eto">Whether the end tag is optional.</param>
            <param name="cm">The <see cref="P:Voodoo.XML.ElementDecl.ContentModel"/> of the element.</param>
            <param name="inclusions"></param>
            <param name="exclusions"></param>
        </member>
        <member name="M:Voodoo.XML.ElementDecl.FindAttribute(System.String)">
            <summary>
            Finds the attribute definition with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Voodoo.XML.AttDef"/> to find.</param>
            <returns>The <see cref="T:Voodoo.XML.AttDef"/> with the specified name.</returns>
            <exception cref="T:System.InvalidOperationException">If the attribute list has not yet been initialised.</exception>
        </member>
        <member name="M:Voodoo.XML.ElementDecl.AddAttDefs(System.Collections.Generic.Dictionary{System.String,Voodoo.XML.AttDef})">
            <summary>
            Adds attribute definitions to the element declaration.
            </summary>
            <param name="list">The list of attribute definitions to add.</param>
        </member>
        <member name="M:Voodoo.XML.ElementDecl.CanContain(System.String,Voodoo.XML.SgmlDtd)">
            <summary>
            Tests whether this element can contain another specified element.
            </summary>
            <param name="name">The name of the element to check for.</param>
            <param name="dtd">The DTD to use to do the check.</param>
            <returns>True if the specified element can be contained by this element.</returns>
        </member>
        <member name="P:Voodoo.XML.ElementDecl.Name">
            <summary>
            The element name.
            </summary>
        </member>
        <member name="P:Voodoo.XML.ElementDecl.ContentModel">
            <summary>
            The <see cref="!:Sgml.ContentModel"/> of the element declaration.
            </summary>
        </member>
        <member name="P:Voodoo.XML.ElementDecl.EndTagOptional">
            <summary>
            Whether the end tag of the element is optional.
            </summary>
            <value>true if the end tag of the element is optional, otherwise false.</value>
        </member>
        <member name="P:Voodoo.XML.ElementDecl.StartTagOptional">
            <summary>
            Whether the start tag of the element is optional.
            </summary>
            <value>true if the start tag of the element is optional, otherwise false.</value>
        </member>
        <member name="T:Voodoo.XML.DeclaredContent">
            <summary>
            Where nested subelements cannot occur within an element, its contents can be declared to consist of one of the types of declared content contained in this enumeration.
            </summary>
        </member>
        <member name="F:Voodoo.XML.DeclaredContent.Default">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:Voodoo.XML.DeclaredContent.CDATA">
            <summary>
            Character data (CDATA), which contains only valid SGML characters.
            </summary>
        </member>
        <member name="F:Voodoo.XML.DeclaredContent.RCDATA">
            <summary>
            Replaceable character data (RCDATA), which can contain text, character references and/or general entity references that resolve to character data.
            </summary>
        </member>
        <member name="F:Voodoo.XML.DeclaredContent.EMPTY">
            <summary>
            Empty element (EMPTY), i.e. having no contents, or contents that can be generated by the program.
            </summary>
        </member>
        <member name="T:Voodoo.XML.ContentModel">
            <summary>
            Defines the content model for an element.
            </summary>
        </member>
        <member name="M:Voodoo.XML.ContentModel.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Voodoo.XML.ContentModel"/> class.
            </summary>
        </member>
        <member name="M:Voodoo.XML.ContentModel.PushGroup">
            <summary>
            Begins processing of a nested model group.
            </summary>
        </member>
        <member name="M:Voodoo.XML.ContentModel.PopGroup">
            <summary>
            Finishes processing of a nested model group.
            </summary>
            <returns>The current depth of the group nesting, or -1 if there are no more groups to pop.</returns>
        </member>
        <member name="M:Voodoo.XML.ContentModel.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the current group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:Voodoo.XML.ContentModel.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list for the current group.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:Voodoo.XML.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:Voodoo.XML.ContentModel.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for the current model group, setting it's <see cref="T:Voodoo.XML.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:Voodoo.XML.ContentModel.SetDeclaredContent(System.String)">
            <summary>
            Sets the contained content for the content model.
            </summary>
            <param name="dc">The text specified the permissible declared child content.</param>
        </member>
        <member name="M:Voodoo.XML.ContentModel.CanContain(System.String,Voodoo.XML.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
        </member>
        <member name="P:Voodoo.XML.ContentModel.CurrentDepth">
            <summary>
            The number of groups on the stack.
            </summary>
        </member>
        <member name="P:Voodoo.XML.ContentModel.DeclaredContent">
            <summary>
            The allowed child content, specifying if nested children are not allowed and if so, what content is allowed.
            </summary>
        </member>
        <member name="T:Voodoo.XML.GroupType">
            <summary>
            The type of the content model group, defining the order in which child elements can occur.
            </summary>
        </member>
        <member name="F:Voodoo.XML.GroupType.None">
            <summary>
            No model group.
            </summary>
        </member>
        <member name="F:Voodoo.XML.GroupType.And">
            <summary>
            All elements must occur, in any order.
            </summary>
        </member>
        <member name="F:Voodoo.XML.GroupType.Or">
            <summary>
            One (and only one) must occur.
            </summary>
        </member>
        <member name="F:Voodoo.XML.GroupType.Sequence">
            <summary>
            All element must occur, in the specified order.
            </summary>
        </member>
        <member name="T:Voodoo.XML.Occurrence">
            <summary>
            Qualifies the occurrence of a child element within a content model group.
            </summary>
        </member>
        <member name="F:Voodoo.XML.Occurrence.Required">
            <summary>
            The element is required and must occur only once.
            </summary>
        </member>
        <member name="F:Voodoo.XML.Occurrence.Optional">
            <summary>
            The element is optional and must occur once at most.
            </summary>
        </member>
        <member name="F:Voodoo.XML.Occurrence.ZeroOrMore">
            <summary>
            The element is optional and can be repeated.
            </summary>
        </member>
        <member name="F:Voodoo.XML.Occurrence.OneOrMore">
            <summary>
            The element must occur at least once or more times.
            </summary>
        </member>
        <member name="T:Voodoo.XML.Group">
            <summary>
            Defines a group of elements nested within another element.
            </summary>
        </member>
        <member name="M:Voodoo.XML.Group.#ctor(Voodoo.XML.Group)">
            <summary>
            Initialises a new Content Model Group.
            </summary>
            <param name="parent">The parent model group.</param>
        </member>
        <member name="M:Voodoo.XML.Group.AddGroup(Voodoo.XML.Group)">
            <summary>
            Adds a new child model group to the end of the group's members.
            </summary>
            <param name="g">The model group to add.</param>
        </member>
        <member name="M:Voodoo.XML.Group.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:Voodoo.XML.Group.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:Voodoo.XML.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:Voodoo.XML.Group.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for this group, setting it's <see cref="P:Voodoo.XML.Group.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:Voodoo.XML.Group.CanContain(System.String,Voodoo.XML.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
            <remarks>
            Rough approximation - this is really assuming an "Or" group
            </remarks>
        </member>
        <member name="P:Voodoo.XML.Group.Occurrence">
            <summary>
            The <see cref="P:Voodoo.XML.Group.Occurrence"/> of this group.
            </summary>
        </member>
        <member name="P:Voodoo.XML.Group.TextOnly">
            <summary>
            Checks whether the group contains only text.
            </summary>
            <value>true if the group is of mixed content and has no members, otherwise false.</value>
        </member>
        <member name="P:Voodoo.XML.Group.Parent">
            <summary>
            The parent group of this group.
            </summary>
        </member>
        <member name="T:Voodoo.XML.AttributeType">
            <summary>
            Defines the different possible attribute types.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.Default">
            <summary>
            Attribute type not specified.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.CDATA">
            <summary>
            The attribute contains text (with no markup).
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.ENTITY">
            <summary>
            The attribute contains an entity declared in a DTD.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.ENTITIES">
            <summary>
            The attribute contains a number of entities declared in a DTD.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.ID">
            <summary>
            The attribute is an id attribute uniquely identifie the element it appears on.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.IDREF">
            <summary>
            The attribute value can be any declared subdocument or data entity name.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.IDREFS">
            <summary>
            The attribute value is a list of (space separated) declared subdocument or data entity names.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NAME">
            <summary>
            The attribute value is a SGML Name.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NAMES">
            <summary>
            The attribute value is a list of (space separated) SGML Names.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NMTOKEN">
            <summary>
            The attribute value is an XML name token (i.e. contains only name characters, but in this case with digits and other valid name characters accepted as the first character).
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NMTOKENS">
            <summary>
            The attribute value is a list of (space separated) XML NMTokens.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NUMBER">
            <summary>
            The attribute value is a number.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NUMBERS">
            <summary>
            The attribute value is a list of (space separated) numbers.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NUTOKEN">
            <summary>
            The attribute value is a number token (i.e. a name that starts with a number).
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NUTOKENS">
            <summary>
            The attribute value is a list of number tokens.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.NOTATION">
            <summary>
            Attribute value is a member of the bracketed list of notation names that qualifies this reserved name.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributeType.ENUMERATION">
            <summary>
            The attribute value is one of a set of allowed names.
            </summary>
        </member>
        <member name="T:Voodoo.XML.AttributePresence">
            <summary>
            Defines the different constraints on an attribute's presence on an element.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributePresence.Default">
            <summary>
            The attribute has a default value, and its presence is optional.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributePresence.Fixed">
            <summary>
            The attribute has a fixed value, if present.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributePresence.Required">
            <summary>
            The attribute must always be present on every element.
            </summary>
        </member>
        <member name="F:Voodoo.XML.AttributePresence.Implied">
            <summary>
            The element is optional.
            </summary>
        </member>
        <member name="T:Voodoo.XML.AttDef">
            <summary>
            An attribute definition in a DTD.
            </summary>
        </member>
        <member name="M:Voodoo.XML.AttDef.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Voodoo.XML.AttDef"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:Voodoo.XML.AttDef.SetEnumeratedType(System.String[],Voodoo.XML.AttributeType)">
            <summary>
            Sets the attribute definition to have an enumerated value.
            </summary>
            <param name="enumValues">The possible values in the enumeration.</param>
            <param name="type">The type to set the attribute to.</param>
            <exception cref="T:System.ArgumentException">If the type parameter is not either <see cref="F:Voodoo.XML.AttributeType.ENUMERATION"/> or <see cref="F:Voodoo.XML.AttributeType.NOTATION"/>.</exception>
        </member>
        <member name="M:Voodoo.XML.AttDef.SetType(System.String)">
            <summary>
            Sets the type of the attribute definition.
            </summary>
            <param name="type">The string representation of the attribute type, corresponding to the values in the <see cref="T:Voodoo.XML.AttributeType"/> enumeration.</param>
        </member>
        <member name="M:Voodoo.XML.AttDef.SetPresence(System.String)">
            <summary>
            Sets the attribute presence declaration.
            </summary>
            <param name="token">The string representation of the attribute presence, corresponding to one of the values in the <see cref="P:Voodoo.XML.AttDef.AttributePresence"/> enumeration.</param>
            <returns>true if the attribute presence implies the element has a default value.</returns>
        </member>
        <member name="P:Voodoo.XML.AttDef.Name">
            <summary>
            The name of the attribute declared by this attribute definition.
            </summary>
        </member>
        <member name="P:Voodoo.XML.AttDef.Default">
            <summary>
            Gets of sets the default value of the attribute.
            </summary>
        </member>
        <member name="P:Voodoo.XML.AttDef.AttributePresence">
            <summary>
            The constraints on the attribute's presence on an element.
            </summary>
        </member>
        <member name="P:Voodoo.XML.AttDef.EnumValues">
            <summary>
            Gets or sets the possible enumerated values for the attribute.
            </summary>
        </member>
        <member name="P:Voodoo.XML.AttDef.Type">
            <summary>
            The <see cref="T:Voodoo.XML.AttributeType"/> of the attribute declaration.
            </summary>
        </member>
        <member name="T:Voodoo.XML.SgmlDtd">
            <summary>
            Provides DTD parsing and support for the SgmlParser framework.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlDtd.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the <see cref="T:Voodoo.XML.SgmlDtd"/> class.
            </summary>
            <param name="name">The name of the DTD.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> to use to store atomized strings.</param>
        </member>
        <member name="M:Voodoo.XML.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Parses a DTD and creates a <see cref="T:Voodoo.XML.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="pubid"></param>
            <param name="url"></param>
            <param name="subset"></param>
            <param name="proxy"></param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> to use to store atomized strings.</param>
            <returns>A new <see cref="T:Voodoo.XML.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Parses a DTD and creates a <see cref="T:Voodoo.XML.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="input">The reader to load the DTD from.</param>
            <param name="subset"></param>
            <param name="proxy">The proxy server to use when loading resources.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> to use to store atomized strings.</param>
            <returns>A new <see cref="T:Voodoo.XML.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlDtd.FindEntity(System.String)">
            <summary>
            Finds an entity in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Voodoo.XML.Entity"/> to find.</param>
            <returns>The specified Entity from the DTD.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlDtd.FindElement(System.String)">
            <summary>
            Finds an element declaration in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Voodoo.XML.ElementDecl"/> to find and return.</param>
            <returns>The <see cref="T:Voodoo.XML.ElementDecl"/> matching the specified name.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlDtd.GetEntitiesLiteralNameLookup">
            <summary>
            Returns a dictionary for looking up entities by their <see cref="P:Voodoo.XML.Entity.Literal"/> value.
            </summary>
            <returns>A dictionary for looking up entities by their <see cref="P:Voodoo.XML.Entity.Literal"/> value.</returns>
        </member>
        <member name="P:Voodoo.XML.SgmlDtd.Name">
            <summary>
            The name of the DTD.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlDtd.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="T:Voodoo.UI.VerifyCode">
            <summary>
             VerifyCode 的摘要说明
            </summary>
        </member>
        <member name="M:Voodoo.UI.VerifyCode.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片（Edit By 51aspx.com）
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高，一般为3</param>
            <param name="dPhase">波形的起始相位，取值区间[0-2*PI)</param>
            <returns></returns>
        </member>
        <member name="F:Voodoo.UI.NavTextForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Voodoo.UI.NavTextForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Voodoo.UI.NavTextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Voodoo.Pay.AliPay.Alipay_Function">
            <summary>
            功能：支付宝接口公用函数类
            详细：该类是请求、通知返回两个文件所调用的公用函数核心处理文件，不需要修改
            版本：3.0
            修改日期：2010-06-13
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            </summary>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Function.Build_mysign(System.Collections.ArrayList,System.String,System.String,System.String)">
            <summary>
            生成签名结果
            </summary>
            <param name="sArray">要加密的数组</param>
            <param name="key">安全校验码</param>
            <param name="sign_type">加密类型</param>
            <param name="_input_charset">编码格式</param>
            <returns>签名结果字符串</returns>
        </member>
        <!-- 对于成员“M:Voodoo.Pay.AliPay.Alipay_Function.Create_linkstring(System.Collections.ArrayList)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Voodoo.Pay.AliPay.Alipay_Function.Create_linkstring_urlencode(System.Collections.ArrayList)”忽略有格式错误的 XML 注释 -->
        <member name="M:Voodoo.Pay.AliPay.Alipay_Function.Para_filter(System.Collections.ArrayList)">
            <summary>
            除去数组中的空值和签名参数
            </summary>
            <param name="sArray">加密参数组</param>
            <returns>去掉空值与签名参数后的新加密参数组</returns>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Function.Arg_sort(System.String[])">
            <summary>
            对数组排序
            </summary>
            <param name="sArray">排序前的数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Function.Sign(System.String,System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="prestr">需要加密的字符串</param>
            <param name="sign_type">加密类型</param>
            <param name="_input_charset">编码格式</param>
            <returns>加密结果</returns>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Function.log_result(System.String,System.String)">
            <summary>
            写日志，方便测试（看网站需求，也可以改成把记录存入数据库）
            </summary>
            <param name="sPath">日志的本地绝对路径</param>
            <param name="sWord">要写入日志里的文本内容</param>
        </member>
        <member name="M:Voodoo.Pay.AliPay.Alipay_Function.Query_timestamp(System.String)">
            <summary>
            用于防钓鱼，调用接口query_timestamp来获取时间戳的处理函数
            注意：远程解析XML出错，与IIS服务器配置有关
            </summary>
            <param name="partner">合作身份者ID</param>
            <returns>时间戳字符串</returns>
        </member>
        <member name="T:Voodoo.obj">
            <summary>
            object类型的相关操作
            2010年8月16日 15:43:40 由kuibono 修改
            </summary>
        </member>
        <member name="M:Voodoo.obj.ToJsonStr(System.Object)">
            <summary>
            实体转换为JSON,带jsoncallback参数
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.ToJson(System.Object)">
            <summary>
            实体转换为JSON,没有jsoncallback参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.DataTableToJson(System.Data.DataTable,System.Boolean)">
            <summary>
            将数据表转换成JSON类型串
            </summary>
            <param name="dt">要转换的数据表</param>
            <param name="dispose">数据表转换结束后是否dispose掉</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.ToSByte(System.Object)">
            <summary>
            类型转换为SByte
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.ToUInt16(System.Object)">
            <summary>
            类型转换为uint16
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.ToInt16(System.Object)">
            <summary>
            类型转换为uint16
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.ToS(System.Object)">
            <summary>
            对象转换为string，失败返回空字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.obj.ToCookieContainer(System.Net.CookieCollection)">
             <summary>
            CookieCollection ×ª»»ÎªCookieContainer
             </summary>
             <param name="collection"></param>
             <returns></returns>
        </member>
        <member name="M:Voodoo.Net.FTPClient.Connect(System.String)">
            <summary>
            连接
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.FtpUpDown(System.String,System.String,System.String)">
            <summary>
            ftp登录信息
            </summary>
            <param name="ftpServerIP">ftpServerIP</param>
            <param name="ftpUserID">ftpUserID</param>
            <param name="ftpPassword">ftpPassword</param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.GetFileList(System.String,System.String)">
            <summary>
            获取文件列表
            </summary>
            <param name="path"></param>
            <param name="WRMethods"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.FTPClient.Upload(System.String,System.String,System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.Upload(System.String,System.Int64,System.String,System.String@)">
            <summary>
            续传文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.Download(System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="filePath"></param>
            <param name="fileName"></param>
            <param name="errorinfo"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.FTPClient.DeleteFileName(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.MakeDir(System.String)">
            <summary>
            在ftp上创建目录
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.delDir(System.String)">
            <summary>
            删除ftp上目录
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.GetFileSize(System.String)">
            <summary>
            获得ftp上文件大小
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.FTPClient.Rename(System.String,System.String)">
            <summary>
            ftp上文件改名
            </summary>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:Voodoo.Net.FTPClient.GetFilesDetailList">
            <summary>
            获得文件明晰
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Net.FTPClient.GetFilesDetailList(System.String)">
            <summary>
            获得文件明晰
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myXML.ToDataTable(System.Xml.XmlNodeList)">
            <summary>
            Xml文件的nodelist转换为DataTable
            </summary>
            <param name="nodelist"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myXML.Serialize(System.Object)">
            <summary>
            xml序列化成字符串
            </summary>
            <param name="obj">对象</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:Voodoo.myXML.DeSerialize(System.Type,System.String)">
            <summary>
            反序列化XML
            </summary>
            <param name="type">对象类型</param>
            <param name="s">xml源字符串</param>
            <returns></returns>
        </member>
        <member name="F:Voodoo.myXML.serializer_dict">
            <summary>
            私有属性
            </summary>
        </member>
        <member name="M:Voodoo.myXML.GetSerializer(System.Type)">
            <summary>
            获取序列化对象，私有方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.IO.File">
            <summary>
            文件处理相关类,本类中所有路径请赋予相对路径
            2010年4月9日 15:51:19 Kuibono创建
            </summary>
        </member>
        <member name="M:Voodoo.IO.File.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.File.Exists(System.String)">
            <summary>
            文件是否存在
            </summary>
            <param name="Path">文件的相对路径</param>
            <returns>true 存在  ，false 不存在</returns>
        </member>
        <member name="M:Voodoo.IO.File.Read(System.String)">
            <summary>
            读取文件内容
            </summary>
            <param name="Path">文件的相对路径</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.File.Read(System.String,Voodoo.IO.File.EnCode)">
            <summary>
            读取文件内容
            </summary>
            <param name="Path">相对路径</param>
            <param name="FileEncoding">文件的编码格式如: Encode.GB2312</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.File.Move(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OldFile">要移动的文件路径（相对）</param>
            <param name="NewFile">新的文件路径（相对）</param>
        </member>
        <member name="M:Voodoo.IO.File.Copy(System.String,System.String)">
            <summary>
            文件拷贝
            </summary>
            <param name="srcFilePath">源文件</param>
            <param name="newFilePath">新文件路径</param>
        </member>
        <member name="M:Voodoo.IO.File.Write(System.String,System.String)">
            <summary>
            写入文件...本功能会自动创建目录和文件
            </summary>
            <param name="Path">文件路径（相对）</param>
            <param name="fileContent">文件内容</param>
        </member>
        <member name="M:Voodoo.IO.File.AppendLine(System.String,System.String,System.String)">
            <summary>
            在文件尾部写入文本
            </summary>
            <param name="Path">路径（相对）</param>
            <param name="FileName"></param>
            <param name="Str"></param>
        </member>
        <member name="M:Voodoo.IO.File.AppendLine(System.String,System.String)">
            <summary>
            在文件尾部写入文本
            </summary>
            <param name="Path">路径（相对）</param>
            <param name="FileName"></param>
            <param name="Str"></param>
        </member>
        <member name="T:Voodoo.IO.File.EnCode">
            <summary>
            文件的编码格式
            </summary>
        </member>
        <member name="F:Voodoo.myDateTime.SECONDSMILLISECONDS">
            <summary>
            一秒毫秒数
            </summary>
        </member>
        <member name="F:Voodoo.myDateTime.MINUTESMILLISECONDS">
            <summary>
            一分钟毫秒数
            </summary>
        </member>
        <member name="F:Voodoo.myDateTime.HOURMILLISECONDS">
            <summary>
            一小时毫秒数
            </summary>
        </member>
        <member name="F:Voodoo.myDateTime.DAYMILLISECONDS">
            <summary>
            一天毫秒数
            </summary>
        </member>
        <member name="M:Voodoo.myDateTime.weekofyear(System.DateTime)">
            <summary> 
            取指定日期是一年中的第几周 
            </summary> 
            <param name="dtime">给定的日期</param> 
            <returns>数字 一年中的第几周</returns> 
            <example>
            
            int weekIndex=DateTime.Now.weekofyear();//返回当前日期为今年的第几周
            
            </example>
        </member>
        <member name="M:Voodoo.myDateTime.MonthDayCount(System.DateTime)">
            <summary>
            获取某个月的天数
            </summary>
            <param name="date">日期</param>
            <returns>天数</returns>
            <example>
            
            int DateTime.Now.MonthDayCount();//获取当前时间的月份有多少天
            
            </example>
        </member>
        <member name="M:Voodoo.myDateTime.LastWeekFirstDay">
            <summary>
            上周的第一天
            </summary>
            <returns>上周第一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.LastWeekLastDay">
            <summary>
            上周的最后一天
            </summary>
            <returns>上周的最后一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.ThisWeekFirstDay">
            <summary>
            本周第一天
            </summary>
            <returns>本周第一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.IsDateArea(System.String)">
            <summary>
            判断字符串是否2010-2-14~2010-2-23这种格式
            </summary>
            <param name="Dates"></param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:Voodoo.myDateTime.IsDateTimeArea(System.String)">
            <summary>
            判断字符串是否是时间格式
            </summary>
            <param name="Dates">要判断的日期</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:Voodoo.myDateTime.ThisWeekLastDay">
            <summary>
            本周最后一天
            </summary>
            <returns>本周最后一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.LastMonthFirstDay">
            <summary>
            上个月第一天
            </summary>
            <returns>上个月第一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.LastMonthLastDay">
            <summary>
            上个月最后一天
            </summary>
            <returns>上个月最后一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.ThisMonthFirstDay">
            <summary>
            本月第一天
            </summary>
            <returns>本月第一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.ThisMonthLastDay">
            <summary>
            本月最后一天
            </summary>
            <returns>本月最后一天的日期值</returns>
        </member>
        <member name="M:Voodoo.myDateTime.IsSingleDay(System.DateTime)">
            <summary>
            日期是不是奇数天
            </summary>
            <param name="s">要进行判断的日期</param>
            <returns>奇数为true 偶数为false</returns>
            <remarks>
            该方法并不是用来判断当前的天数是不是奇数，而是判断当前日期距离2010-01-01的天数是不是奇数
            </remarks>
        </member>
        <member name="M:Voodoo.myDateTime.ConvertDateTime(System.String)">
            <summary>
            将时间字符串转换为2010/12/5这种格式
            </summary>
            <param name="dateTime">时间字符串</param>
            <returns>如：2010/12/5的格式</returns>
        </member>
        <member name="M:Voodoo.myDateTime.ToShortChar(System.DateTime)">
            <summary>
            时间转换成 7/26这种短格式
            </summary>
            <param name="dt">时间</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDateTime.GetWeekDayName(System.DateTime)">
            <summary>
            获取当前日期为周几
            </summary>
            <param name="date">要判断的日期</param>
            <returns>返回“周一”、“周二”这种字符</returns>
        </member>
        <member name="M:Voodoo.myDateTime.GetTimeDifference(System.DateTime,System.DateTime)">
            <summary>
            时间差显示字符串
            </summary>
            <param name="st">开始时间</param>
            <param name="et">结束时间</param>
            <returns>如：刚刚，或者 2小时前</returns>
        </member>
        <member name="M:Voodoo.myDateTime.GetLunarCalendar(System.DateTime)">
            <summary> 
            获取对应日期的农历 
            </summary> 
            <param name="dtDay">公历日期</param> 
            <returns></returns> 
        </member>
        <member name="M:Voodoo.myDateTime.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDateTime.ToUnixTimestamp(System.DateTime)">
            <summary>
            转换为Unix时间戳
            </summary>
            <param name="dt">要转换的时间</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.myDateTime.DateTimeCharToDateTime(System.String)">
            <summary>
            char类型的时间转换成标准时间
            </summary>
            <param name="date">输入如“20100523”类型字符串</param>
            <returns></returns>
            <example>
            
            DateTime myDate="20100513".DateTimeCharToDateTime();
            
            </example>
        </member>
        <member name="T:Voodoo.FileAttribute">
            <summary>
            文件属性
            </summary>
        </member>
        <member name="P:Voodoo.FileAttribute.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Voodoo.FileAttribute.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Voodoo.FileAttribute.IsDirectory">
            <summary>
            是目录
            </summary>
        </member>
        <member name="M:Voodoo.Net.Mail.SMTP.SentMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送电子邮件
            </summary>
            <param name="from">发件邮箱地址</param>
            <param name="password">邮箱密码</param>
            <param name="to">收件人地址</param>
            <param name="FromText">发送者文字</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="smtpHost">SMTP服务器</param>
            <returns>发送邮件是否成功</returns>
        </member>
        <member name="M:Voodoo.IO.ExcelHelper.GetSheet(NPOI.HSSF.UserModel.HSSFWorkbook,System.Data.DataTable,System.String)">
            <summary>
            私有方法 生成SHEET列表
            </summary>
            <param name="workbook"></param>
            <param name="dtData"></param>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.ExcelHelper.GetWorkBook(System.Data.DataTable,System.String)">
            <summary>
            私有方法 把DataTable转换成WorkBook
            </summary>
            <param name="dtData"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.IO.ExcelHelper.Export(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换成Excel并且保存成文件
            </summary>
            <param name="dtData">需要转换的DataTable</param>
            <param name="FileName">保存文件的绝对路径</param>
        </member>
        <member name="M:Voodoo.IO.ExcelHelper.ResponseExcel(System.Data.DataTable,System.String)">
            <summary>
            将DataTable转换成Excel并输出到页面
            </summary>
            <param name="dtData"></param>
        </member>
        <member name="M:Voodoo.bool.ToChinese(System.Boolean)">
            <summary>
            将布尔类型的状态转换为“是”、“否”的字符串
            </summary>
            <param name="b">true或者false</param>
            <example>
            bool IsGood=false;<br/>
            string str_Good=IsGood.ToChinese();//结果为“否”
             </example>
        </member>
        <member name="M:Voodoo.bool.BoolToShort(System.Boolean)">
            <summary>
            BOOL类型转换为short
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.UI.ChineseVerifyCode.CreateRegionCode(System.Int32)">
            <summary>
            此函数在汉字编码范围内随机创建含两个元素的十六进制字节数组，每个字节数组代表一个汉字，并将四个字节数组存储在object数组中。 
            </summary>
            <param name="strLength">代表需要产生的汉字个数</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Security.Server">
            <summary>
            服务器相关信息
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.IpList">
            <summary>
            IpList 服务器IP地址
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.BaseBoardInfo">
            <summary>
            BaseBoardInfo 主板信息
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.BiosInfo">
            <summary>
            BiosInfo BIOS信息
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.PhysicalDiskInfo">
            <summary>
            PhysicalDiskInfo 获取物理盘信息
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.NAConfigurationInfo">
            <summary>
            NAConfigurationInfo 网卡配置信息
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.ProcessorInfo">
            <summary>
            ProcessorInfo CPU信息
            </summary>
        </member>
        <member name="P:Voodoo.Security.Server.LogicalDiskInfo">
            <summary>
            LogicalDiskInfo 逻辑磁盘信息
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.MySqlHelper.Conn">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.MySqlHelper.Cmd">
            <summary>
            命令对象
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.#ctor(System.String,System.Int32)">
            <summary>
            实例化 带超时时间
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Open">
            <summary>
            开启数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Close">
            <summary>
            关闭数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Dispose">
            <summary>
            释放使用的所有资源
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Add(System.Data.Common.DbParameter[])">
            <summary>
            添加SqlCommand 的参数
            </summary>
            <param name="CmdParameters">SqlCommand 的参数</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object)">
            <summary> 
            传入存储过程参数和值,设置传入值类型 
            </summary> 
            <param name="ParamName"></param> 
            <param name="MySqlDbType"></param> 
            <param name="Value"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,值可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="MySqlDbType"></param> 
            <param name="Value"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Int32)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度 
            </summary> 
            <param name="ParamName"></param> 
            <param name="MySqlDbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Int32,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度,可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="MySqlDbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Object,System.Int32,System.Int32)">
            <summary> 
            传入存储过程参数和值,专用于Decimal类型传入 
            </summary> 
            <param name="ParamName"></param> 
            <param name="MySqlDbType"></param> 
            <param name="Precision">长度</param> 
            <param name="Scale">精度</param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.CreateCmd(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],MySql.Data.MySqlClient.MySqlTransaction)">
            <summary>
            SqlCommand 的此实例使用的SqlConnection开启
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataSet(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataTable(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteNonQuery(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.String)">
            <summary> 
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.PageListViewSort(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            返回分页后的DataTable
            </summary>
            <param name="Tables">表（多个表用“,”分割）</param>
            <param name="PrimaryKey">表的主键</param>
            <param name="Sort">排序表达式</param>
            <param name="CurrentPage">当前页码</param>
            <param name="PageSize">每页显示记录数</param>
            <param name="Fields">需要查询出的字段</param>
            <param name="Filter">where语句，不需要带“where”</param>
            <param name="group">Group表达式 不需要“group”</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.MySqlHelper.PageCountSort(System.String,System.String,System.String)">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="Tables">表名</param>
            <param name="Filter">where语句</param>
            <param name="group">group语句</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Data.DbHelper.MySqlHelper.ConnClose">
            <summary>
            DataReader及其相关联的连接是否在DataReader完成数据读取时自动关闭
            </summary>
        </member>
        <member name="T:Voodoo.XML.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="F:Voodoo.XML.CaseFolding.None">
            <summary>
            Do not convert case, except for converting end tags to match start tags.
            </summary>
        </member>
        <member name="F:Voodoo.XML.CaseFolding.ToUpper">
            <summary>
            Convert tags to upper case.
            </summary>
        </member>
        <member name="F:Voodoo.XML.CaseFolding.ToLower">
            <summary>
            Convert tags to lower case.
            </summary>
        </member>
        <member name="T:Voodoo.XML.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="M:Voodoo.XML.HWStack.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the HWStack class.
            </summary>
            <param name="growth">The amount to grow the stack space by, if more space is needed on the stack.</param>
        </member>
        <member name="M:Voodoo.XML.HWStack.Pop">
            <summary>
            Removes and returns the item at the top of the stack
            </summary>
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:Voodoo.XML.HWStack.Push">
            <summary>
            Pushes a new slot at the top of the stack.
            </summary>
            <returns>The object at the top of the stack.</returns>
            <remarks>
            This method tries to reuse a slot, if it returns null then
            the user has to call the other Push method.
            </remarks>
        </member>
        <member name="M:Voodoo.XML.HWStack.RemoveAt(System.Int32)">
            <summary>
            Remove a specific item from the stack.
            </summary>
            <param name="i">The index of the item to remove.</param>
        </member>
        <member name="P:Voodoo.XML.HWStack.Count">
            <summary>
            The number of items currently in the stack.
            </summary>
        </member>
        <member name="P:Voodoo.XML.HWStack.Size">
            <summary>
            The size (capacity) of the stack.
            </summary>
        </member>
        <member name="P:Voodoo.XML.HWStack.Item(System.Int32)">
            <summary>
            Returns the item at the requested index or null if index is out of bounds
            </summary>
            <param name="i">The index of the item to retrieve.</param>
            <returns>The item at the requested index or null if index is out of bounds.</returns>
        </member>
        <member name="T:Voodoo.XML.Attribute">
            <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:Voodoo.XML.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method.
            </summary>
        </member>
        <member name="T:Voodoo.XML.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:Voodoo.XML.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:Voodoo.XML.SgmlReader">
            <summary>
            SgmlReader is an XmlReader API over any SGML document (including built in 
            support for HTML).  
            </summary>
        </member>
        <member name="F:Voodoo.XML.SgmlReader.UNDEFINED_NAMESPACE">
            <summary>
            The value returned when a namespace is queried and none has been specified.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.#ctor">
            <summary>
            Initialises a new instance of the SgmlReader class.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the SgmlReader class with an existing <see cref="T:System.Xml.XmlNameTable"/>
            </summary>
            <param name="nt">The nametable to use.</param>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:Voodoo.XML.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:Voodoo.XML.SgmlReader.LocalName"/> and <see cref="P:Voodoo.XML.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the atttribute with the specified <see cref="P:Voodoo.XML.SgmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:Voodoo.XML.SgmlReader.LocalName"/> and <see cref="P:Voodoo.XML.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute to move to.</param>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>true if there is a next attribute; false if there are no more attributes.</returns>
            <remarks>
            If the current node is an element node, this method is equivalent to <see cref="M:Voodoo.XML.SgmlReader.MoveToFirstAttribute"/>. If <see cref="M:Voodoo.XML.SgmlReader.MoveToNextAttribute"/> returns true,
            the reader moves to the next attribute; otherwise, the position of the reader does not change.
            </remarks>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned
            on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.GetEncoding">
            <summary>
            Returns the encoding of the current entity.
            </summary>
            <returns>The encoding of the current entity.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Consumes and returns a literal block of text, expanding entities as it does so.
            </summary>
            <param name="sb">The string builder to use.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The consumed literal.</returns>
            <remarks>
            This version is slightly different from <see cref="M:Voodoo.XML.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)"/> in that
            it also expands entities.
            </remarks>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.Close">
            <summary>
            Changes the <see cref="P:Voodoo.XML.SgmlReader.ReadState"/> to Closed.
            </summary>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.ReadString">
            <summary>
            Reads the contents of an element or text node as a string.
            </summary>
            <returns>The contents of the element or an empty string.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.ReadInnerXml">
            <summary>
            Reads all the content, including markup, as a string.
            </summary>
            <returns>
            All the XML content, including markup, in the current node. If the current node has no children,
            an empty string is returned. If the current node is neither an element nor attribute, an empty
            string is returned.
            </returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.ReadOuterXml">
            <summary>
            Reads the content, including markup, representing this node and all its children.
            </summary>
            <returns>
            If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.
            </returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.LookupNamespace(System.String)">
            <summary>
            Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>The namespace URI to which the prefix maps or a null reference (Nothing in Visual Basic) if no matching prefix is found.</returns>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
            <exception cref="T:System.InvalidOperationException">SgmlReader does not resolve or return entities.</exception>
        </member>
        <member name="M:Voodoo.XML.SgmlReader.ReadAttributeValue">
            <summary>
            Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
            true if there are nodes to return. false if the reader is not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read. An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
            </returns>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.RootElementName">
            <summary>
            The root element of the document.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.StripDocType">
            <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.CaseFolding">
            <summary>
            The case conversion behaviour while processing tags.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.NodeType">
            <summary>
            The node type of the node currently being parsed.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Name">
            <summary>
            The name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.LocalName">
            <summary>
            The local name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.NamespaceURI">
            <summary>
            The namespace of the current node, if currently positioned on a node or attribute.
            </summary>
            <remarks>
            If not positioned on a node or attribute, <see cref="F:Voodoo.XML.SgmlReader.UNDEFINED_NAMESPACE"/> is returned.
            </remarks>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Prefix">
            <summary>
            The prefix of the current node's name.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.HasValue">
            <summary>
            Whether the current node has a value or not.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Value">
            <summary>
            The value of the current node.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
            <value>The depth of the current node in the XML document.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
            <value>The base URI of the current node.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
            <value>
            true if the current node is an attribute whose value was generated from the default value defined in the DTD or
            schema; false if the attribute value was explicitly set.
            </value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
            <value>The quotation mark character (" or ') used to enclose the value of an attribute node.</value>
            <remarks>
            This property applies only to an attribute node.
            </remarks>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.XmlSpace">
            <summary>
            Gets the current xml:space scope.
            </summary>
            <value>One of the <see cref="P:Voodoo.XML.SgmlReader.XmlSpace"/> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
            <value>The current xml:lang scope.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.WhitespaceHandling">
            <summary>
            Specifies how white space is handled.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <value>The number of attributes on the current node.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Item(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:Voodoo.XML.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:Voodoo.XML.SgmlReader.LocalName"/> and <see cref="P:Voodoo.XML.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.IsHtml">
            <summary>
            Gets whether the content is HTML or not.
            </summary>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            <value>true if the reader is positioned at the end of the stream; otherwise, false.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
            <value>One of the ReadState values.</value>
        </member>
        <member name="P:Voodoo.XML.SgmlReader.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="T:Voodoo.Pay.YeePay.BuyBankDirectConnectResult">
            <summary>
            BuyBankDirectConnectResult 的实体类
            </summary>
        </member>
        <member name="M:Voodoo.Pay.YeePay.BuyBankDirectConnectResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            骏网支付请求返回序列
            </summary>
            <param name="r0_Cmd"></param>
            <param name="r1_Code"></param>
            <param name="r2_TrxId"></param>
            <param name="r3_Amt"></param>
            <param name="r4_Cur"></param>
            <param name="r6_Order"></param>
            <param name="ro_BankOrderId"></param>
            <param name="r8_MP"></param>
            <param name="hmac"></param>
        </member>
        <member name="P:Voodoo.Pay.YeePay.BuyBankDirectConnectResult.R6_Order">
            --
        </member>
        <member name="P:Voodoo.Result.Success">
            <summary>
            执行是否成功
            </summary>
        </member>
        <member name="P:Voodoo.Result.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Voodoo.Result.Remark">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Voodoo.Result.Count">
            <summary>
            成功或失败个数
            </summary>
        </member>
        <member name="P:Voodoo.Result.Url">
            <summary>
            URL地址
            </summary>
        </member>
        <member name="P:Voodoo.Result.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Voodoo.Result.Contact">
            <summary>
            联系人
            </summary>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.#ctor">
            <summary>
            构造函数
            </summary>
            <remarks>一个邮件接收对象</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="host">主机名称或IP地址</param>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="host">主机名称或IP地址</param>
            <param name="port">主机的端口号</param>
            <remarks>一个邮件接收对象</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.WriteToNetStream(System.Net.Sockets.NetworkStream@,System.String)">
            <summary>
            向网络访问的基础数据流中写数据（发送命令码）
            </summary>
            <param name="netStream">可以用于网络访问的基础数据流</param>
            <param name="command">命令行</param>
            <remarks>向网络访问的基础数据流中写数据（发送命令码）</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.CheckCorrect(System.String,System.String)">
            <summary>
            检查命令行结果是否正确
            </summary>
            <param name="message">命令行的执行结果</param>
            <param name="check">正确标志</param>
            <returns>
            类型：布尔
            内容：true表示没有错误，false为有错误
            </returns>
            <remarks>检查命令行结果是否有错误</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.GetMailNumber(System.String)">
            <summary>
            邮箱中的未读邮件数
            </summary>
            <param name="message">执行完LIST命令后的结果</param>
            <returns>
            类型：整型
            内容：邮箱中的未读邮件数
            </returns>
            <remarks>邮箱中的未读邮件数</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.GetDecodeMailContent(System.String)">
            <summary>
            得到经过解码后的邮件的内容
            </summary>
            <param name="encodingContent">解码前的邮件的内容</param>
            <returns>
            类型：字符串
            内容：解码后的邮件的内容
            </returns>
            <remarks>得到解码后的邮件的内容</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.Connect">
            <summary>
            与主机建立连接
            </summary>
            <returns>
            类型：布尔
            内容：连接结果（true为连接成功，false为连接失败）
            </returns>
            <remarks>与主机建立连接</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.ExecuteCommand(System.String)">
            <summary>
            执行Pop3命令，并检查执行的结果
            </summary>
            <param name="command">Pop3命令行</param>
            <returns>
            类型：字符串
            内容：Pop3命令的执行结果
            </returns>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.ReadMultiLine">
            <summary>
            在Pop3命令中，LIST、RETR和UIDL命令的结果要返回多行，以点号（.）结尾，
            所以如果想得到正确的结果，必须读取多行
            </summary>
            <returns>
            类型：字符串
            内容：执行Pop3命令后的结果
            </returns>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.ReceiveMail(System.String,System.String)">
            <summary>
            收取邮件
            </summary>
            <param name="user">用户名</param>
            <param name="password">口令</param>
            <returns>
            类型：字符串数组
            内容：解码前的邮件内容
            </returns>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.Receive(System.String,System.String)">
             <summary>
             收取邮件    
             </summary>
             <param name="user">用户名</param>
             <param name="password">口令</param>
             <returns>
             类型：字符串数组
             内容：解码前的邮件内容
             </returns>
            <remarks>收取邮箱中的未读邮件</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.DisConnect">
            <summary>
            断开所有与服务器的会话
            </summary>
            <remarks>断开所有与服务器的会话</remarks>
        </member>
        <member name="M:Voodoo.Net.Mail.Pop3.DeleteMail(System.Int32)">
            <summary>
            删除邮件
            </summary>
            <param name="number">邮件号</param>
        </member>
        <member name="P:Voodoo.Net.Mail.Pop3.HostName">
            <summary>
            主机名称或IP地址
            </summary>
            <remarks>主机名称或IP地址</remarks>
        </member>
        <member name="P:Voodoo.Net.Mail.Pop3.Port">
            <summary>
            主机的端口号
            </summary>
            <remarks>主机的端口号</remarks>
        </member>
        <member name="M:Voodoo.NetExt.SentMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送电子邮件
            </summary>
            <param name="from">发件邮箱地址</param>
            <param name="password">邮箱密码</param>
            <param name="to">收件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="smtpHost">SMTP服务器</param>
            <returns>发送邮件是否成功</returns>
        </member>
        <member name="T:Voodoo.Pay.YeePay.HmacMD5">
            <summary>
            HmacMD5加密
            </summary>
        </member>
        <member name="T:Voodoo.Chinese">
            <summary>
            中文处理
            </summary>
        </member>
        <member name="M:Voodoo.Chinese.ToSBC(System.String)">
            <summary>
            转全角(SBC case)
            </summary>
            <param name="input">任意字符串</param>
            <returns>全角字符串</returns>
        </member>
        <member name="M:Voodoo.Chinese.ToDBC(System.String)">
            <summary>
            转半角(DBC case)
            </summary>
            <param name="input">任意字符串</param>
            <returns>半角字符串</returns>
        </member>
        <member name="M:Voodoo.Chinese.ToSChinese(System.String)">
            <summary>
            转换为简体中文
            </summary>
        </member>
        <member name="M:Voodoo.Chinese.ToTChinese(System.String)">
            <summary>
            转换为繁体中文
            </summary>
        </member>
        <member name="M:Voodoo.Chinese.FirstChar(System.String)">
            <summary>
            获取文本首字母
            </summary>
            <param name="m_Text">要处理的文本</param>
            <returns></returns>
        </member>
        <member name="F:Voodoo.Data.DbHelper.OleDbHelper.Conn">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:Voodoo.Data.DbHelper.OleDbHelper.Cmd">
            <summary>
            命令对象
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.#ctor(System.String,System.Int32)">
            <summary>
            实例化 带超时时间
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Open">
            <summary>
            开启数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Close">
            <summary>
            关闭数据源的连接
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Dispose">
            <summary>
            释放使用的所有资源
            </summary>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Add(System.Data.Common.DbParameter[])">
            <summary>
            添加SqlCommand 的参数
            </summary>
            <param name="CmdParameters">SqlCommand 的参数</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Add(System.String,System.Data.OleDb.OleDbType,System.Object)">
            <summary> 
            传入存储过程参数和值,设置传入值类型 
            </summary> 
            <param name="ParamName"></param> 
            <param name="OleDbType"></param> 
            <param name="Value"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Add(System.String,System.Data.OleDb.OleDbType,System.Object,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,值可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="OleDbType"></param> 
            <param name="Value"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Add(System.String,System.Data.OleDb.OleDbType,System.Object,System.Int32)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度 
            </summary> 
            <param name="ParamName"></param> 
            <param name="OleDbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Add(System.String,System.Data.OleDb.OleDbType,System.Object,System.Int32,System.Boolean)">
            <summary> 
            传入存储过程参数和值,设置传入值类型,限定值的长度,可为空 
            </summary> 
            <param name="ParamName"></param> 
            <param name="OleDbType"></param> 
            <param name="Value"></param> 
            <param name="Size"></param> 
            <param name="NoNull"></param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.Add(System.String,System.Data.OleDb.OleDbType,System.Object,System.Int32,System.Int32)">
            <summary> 
            传入存储过程参数和值,专用于Decimal类型传入 
            </summary> 
            <param name="ParamName"></param> 
            <param name="OleDbType"></param> 
            <param name="Precision">长度</param> 
            <param name="Scale">精度</param> 
            <remarks></remarks> 
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.CreateCmd(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.OleDb.OleDbTransaction)">
            <summary>
            SqlCommand 的此实例使用的SqlConnection开启
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataSet(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataSet
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataTable(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回DataTable
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteNonQuery(System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.String)">
            <summary> 
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            将CommandText发送到Connection，并使用CommandBehavior值之一生成一个SqlDataReader
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <param name="ConnOwnership">DataReader完成数据读取时是否关闭</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="CmdType">指定如何解释命令字符串</param>
            <param name="CmdText">Transact-SQL 语句</param>
            <param name="CmdParameters">SqlCommand 的参数</param>
            <param name="Transaction">Transact-SQL 事务</param>
            <returns>返回的结果集中第一行的第一列</returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.PageListViewSort(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            返回分页后的DataTable
            </summary>
            <param name="Tables">表（多个表用“,”分割）</param>
            <param name="PrimaryKey">表的主键</param>
            <param name="Sort">排序表达式</param>
            <param name="CurrentPage">当前页码</param>
            <param name="PageSize">每页显示记录数</param>
            <param name="Fields">需要查询出的字段</param>
            <param name="Filter">where语句，不需要带“where”</param>
            <param name="group">Group表达式 不需要“group”</param>
            <returns></returns>
        </member>
        <member name="M:Voodoo.Data.DbHelper.OleDbHelper.PageCountSort(System.String,System.String,System.String)">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="Tables">表名</param>
            <param name="Filter">where语句</param>
            <param name="group">group语句</param>
            <returns></returns>
        </member>
        <member name="T:Voodoo.Data.DbHelper.OleDbHelper.ConnClose">
            <summary>
            DataReader及其相关联的连接是否在DataReader完成数据读取时自动关闭
            </summary>
        </member>
    </members>
</doc>
